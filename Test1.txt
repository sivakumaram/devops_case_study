#####Windows Script for globalhealthcheck

$username = '$INPUT{USERNAME}'
$password = ConvertTo-SecureString '$INPUT{PASSWORD}' -AsPlainText -Force
$credential = new-object -typename System.Management.Automation.PSCredential -argumentlist $username, $password
$windowsConfigItems = '$INPUT{wincfg}'
#$windowsConfigItems
#$corefunctions = '$INPUT{OD_CORE_F}'
#$corefunctions

#$env:computername

Try {
	
    Invoke-Command -ComputerName '$INPUT{COMPUTERNAME}' -Credential $credential -Scriptblock {

        $windowsConfigItem = $args[0]
        $computers = $env:computername


        $global:objectProperty = @{ }

        $global:objectProperty.Add('SERVERNAME', $computers)

        function CLUSTER {
            try {
                try {
                    $Nodes = Get-ClusterNode
                }
                catch {
                    $Nodes = $Null
                }

                try {
                    $Clustername = Get-cluster
                }
                catch {
                    $Clustername = $Null
                } 

                $Nonodes = $Nodes.Count

                #Write-Host "----------------------" 
                #Write-Host "Cluster Has $Nonodes Nodes and Cluster name is: "$Clustername" "
                $Clusternodenames = $Nodes.Name 

                #Write-Host "----------------------" 
                #Write-Host "Cluster Nodes are : "
                $Domainname = (Get-WmiObject Win32_ComputerSystem).Domain

                $subnodes = @()
                foreach ($mnodes in $Clusternodenames) {
                    $subnodes += "$mnodes.$Domainname"	
                }
                 
                if ($subnodes) {
                    $subnodes = $subnodes -join (",")
                }
                else {
                    $subnodes = "No Associated Cluster nodes Found"
                }
                $clusterInfo = "ClusterNodes"
                $global:objectProperty.Add($clusterInfo, $subnodes)
            }
            catch [Exception] {
                $global:objectProperty.Add("ClusterNodes", "Resolve Script has encountered an Fatal error for server $computers")
            }
        }

        function CPU {
            try {
                $ProcessorUsage = (Get-WmiObject -Class win32_processor -ErrorAction Stop | Measure-Object -Property LoadPercentage -Average | Select-Object Average).Average
                $CpuCores = (Get-WMIObject Win32_ComputerSystem).NumberOfLogicalProcessors
                $cpuProcess = (Get-Counter "\Process(*)\% Processor Time" -ErrorAction SilentlyContinue).CounterSamples | Select InstanceName, @{Name = "CPUPercentage"; Expression = { [Decimal]::Round(($_.CookedValue / $CpuCores), 2) } } | sort *CPU* -Descending | Select -First 10
                If($ProcessorUsage -le 90) {
                    $cpustatus = 'Optimal'
                }
                else {
                $cpustatus = "Above " + $ProcessorUsage + "%"
                }
                $pserv=@()
                $pruncount = 0
                ForEach ($procs in $cpuProcess){ 
		            If($procs.CPUPercentage -ge 90) {
                        $pruncount ++
                        $pserv += $procs.InstanceName + "|"
                    }
                } 

                $cputopprocess = "Total $pruncount CPU processes above 90% ($pserv)"

                $cpuArray = "" | Select-Object @{n = "CPUUsage"; e = { $cpustatus } }, @{n = "CPUTop5"; e = { $cputopprocess } }
                $CPUInfo = "CPUInfo"
                $global:objectProperty.Add($cpuinfo, $cpuArray)
            }
            catch [Exception] {
                $global:objectProperty.Add("CPUinfo", "$_.Exception.Message")
            }
        }


        function RDP {
            try {
                $rdpcount = 0
                $rpport = netstat -ano | select-string "0.0.0.0:3389"
                foreach ($rpr in $rpport) {
                    if ($rpr -match "LISTENING") {
                        $rdpcount = $rdpcount + 1
                    }
                }
                if ($rdpcount -ge 1) {
                    $RDP = "OK"
                }
                else {
                    $RDP = "NOTOK"
                }
                $global:objectProperty.Add("RDP", $RDP)
            }
            catch [Exception] {
                $global:objectProperty.Add("RDP", "$_.Exception.Message")
            }
        }

        function DISK {
            try {
                $osDiskCollection = Get-WmiObject -Class Win32_logicaldisk -Filter "DriveType = '3'" | Select-Object DeviceId, VolumeName, FileSystem, VolumeSerialNumber, VolumeDirty, @{ n = "Size(GB)"; e = { [math]::Round($_.Size / 1GB, 2) } }, @{ n = "FreeSpace(GB)"; e = { [math]::Round($_.FreeSpace / 1GB, 2) } }, @{ n = "PercentFree"; e = { "{0:N0}" -f (($_.FreeSpace / $_.Size) * 100) } }
                $baddiskcount = 0
                $dserv=@()
                ForEach ($disk in $osDiskCollection){ 
                    If([int]$disk.PercentFree -le 20) {
                $baddiskcount ++
                $dserv += $disk.DeviceId + "|"
                    }
                }
                If($baddiskcount -gt 0) {
                    $diskstatus = 'WarningLowDiskSpace'
                }
                else {
                    $diskstatus = 'Optimal'
                }
                  
                $lowdiskcounts = "Total $baddiskcount Disks below 20% freespace ($dserv)"
                $diskArray = "" | Select-Object @{n = "DiskUsage"; e = { $diskstatus } }, @{n = "DiskLowCount"; e = { $lowdiskcounts } }
                $comment = "DiskInformation"
                $global:objectProperty.Add($comment, $diskArray)
            }
            catch {
                $global:objectProperty.Add("DiskInformation", "Code Execution failed")
            }
    
        }

        function MEMORY {
            try {
                $ComputerMemory = Get-WmiObject -Class win32_operatingsystem -ErrorAction Stop 
                $Memory = ((($ComputerMemory.TotalVisibleMemorySize - $ComputerMemory.FreePhysicalMemory) * 100) / $ComputerMemory.TotalVisibleMemorySize)
                $RoundMemory = [math]::Round($Memory, 0)
                $memtops = Get-WmiObject WIN32_PROCESS | Sort-Object -Property ws -Descending | Select-Object -first 5 ProcessID, Name
                If($RoundMemory -le 90) {
                    $memStatus = 'Optimal'
                }
                else {
                $memStatus = "Above " + $RoundMemory + "%"
                }
                $mserv=@()
                ForEach ($mp in $memtops){ 
                    $mserv += $mp.Name + "[PID: " + $mp.ProcessID + "]" + "|"
                    
                } 

                $memtopprocess = "($mserv)"

                $MEMARRAY = "" | Select-Object @{n = "MemUsage"; e = { $memStatus } }, @{n = "MemTop5"; e = { $memtopprocess } }
                $global:objectProperty.Add("Meminfo", $MEMARRAY)
            }
            catch [Exception] {
                $global:objectProperty.Add("Meminfo", "$_.Exception.Message")
            }
        }

        function WINDOWS_IIS {
            try {
                $ErrorActionPreference = "silentlycontinue"
                $service = Get-Service -ComputerName $computers | 
                Where-Object Name -Contains "W3SVC" | 
                Select-Object Status -ExpandProperty status
                if ($service) {
                    $service = "IIS Installed"
                }
                else {
                    $service = "Service is not installed"
                }
                $global:objectProperty.Add("IISService", $service)
            }
            catch {
                $global:objectProperty.Add("IISService", "Code Execution failed")
            }
        }

        function IISLogs {
            $path = "c:\inetpub\logs\"
            if (get-item $path -ea SilentlyContinue) {
                try {
                    $iislogs = @()
                    forEach ($filePath in (Get-ChildItem 'C:\inetpub\Logs\*.log' -Recurse)) {
                        $headers = (Get-Content -Path $filePath -TotalCount 4 | Select -First 1 -Skip 3) -replace '#Fields: ' -split ' '
                        $iislogs += Get-Content $filePath | Select-String -Pattern '^#' -NotMatch | ConvertFrom-Csv -Delimiter ' ' -Header $headers | Sort-Object c-ip -Unique
        
                    }
    
                    $global:objectProperty.Add("IISLogs", $iislogs )
                }
                catch {
                    $global:objectProperty.Add("IISLogs", "Code Execution failed")
                }
            }
            else {
                $global:objectProperty.Add("IISLogs", "Inetpub Folder Does not exist!")
            }
        }

        function WINDOWS_SQLSERVER {
            <# $sqlservice = Get-Service -ErrorAction SilentlyContinue -ComputerName $computers | Where-Object Name -like "SQL*" |  Select-Object Status -ExpandProperty status#>
            try {
                $ErrorActionPreference = "silentlycontinue"
    
                $sqlservice = Get-Service | Where-Object { $_. Name -like "SQL*" } | Select Name, Status, Displayname
  
                if ($sqlservice) {
                    $sqlservice = "SQL Service Available"
               
                }
                else {
                    $sqlservice = "Not Installed"
               
                }
                $global:objectProperty.Add("SQLService", $sqlservice)
            }
            catch {
                $global:objectProperty.Add("SQLService", "Code Execution failed")
            }
        }

        function WINDOWS_AUTOSERVICE {
	
            try {
                $autoservice = @()
                $autoservice = Get-WmiObject Win32_Service -computername $computers |
                Where-Object { $_.StartMode -eq "Auto" -and $_.State -ne "Running" }
                ForEach ($autosrv in $autoservice){ 
                    $asrv += $autosrv.Name + "|"
                    
                } 
				$aservstatus = "$asrv"
                $global:objectProperty.Add("StoppedAutoservices", $aservstatus)
            }
            catch {
                $global:objectProperty.Add("StoppedAutoservices", "Code execution failed")
            }
       
        }

        function WINDOWS_PATCHES {
            try {
                $date = (Get-Date).AddDays(-30)

                $Patches = get-wmiobject -class win32_quickfixengineering -computername $computers | 
                Where-Object { $psitem.installedon -gt $date } | select Description, HotFixID, @{Name = "InstalledOn"; Expression = { $_.InstalledOn.DateTime } }  
                if (!($Patches)) {
                    $Patches = "No recent patches installed"
                }
                else {
               		ForEach ($patch in $Patches){ 
                    $psts += $patch.HotFixID + "|"
                    
                	} 
					$patchstatus = "$psts"
                }
                
        
                $global:objectProperty.Add("RecentPatches", $patchstatus)
            }
            catch {
                $global:objectProperty.Add("RecentPatches", "Code execution failed")
            }
        }
        
        #function SCHEDULEDTASK ($computerName)
        function WINDOWS_SCHEDULEDTASK {
            try {
                $schedule = Get-ScheduledTask | Where-Object { $_.State -eq "Running" }
                If($schedule){
                	ForEach ($sch in $schedule){ 
                    $schedulerun += $sch.TaskName + "|"
                	}
                	$schstatus = "$schedulerun"
                }
                else {
                	$schstatus = "No Scheduled Tasks found"
                	}
                
                $global:objectProperty.Add("ActiveScheduledTasks", $schstatus)
            }
            catch {
                $global:objectProperty.Add("ActiveScheduledTasks", "Code execution failed")
            }
        }
        
        #Last 10 system events
		function WINDOWS_TOPSYSTEMEVENTS {
		    try {
		        $sysevents = Get-WinEvent -LogName system -MaxEvents 10  | Select-Object Id, @{n = 'Message' ; e={$_.message.split("`r")[0].trim()}} 
		        If($sysevents){
                    ForEach ($sevent in $sysevents){ 
                        $seventsrv += $sevent.Message + "(Id: " + $sevent.Id+ ")" + "|"
                    
                } 
                    $seventstatus = "$seventsrv"
                }
		        $global:objectProperty.Add("Top10SystemEventlogs", $seventstatus )
		    }
		    catch {
		        $global:objectProperty.Add("Top_10_System_Event_logs", "Code execution failed")	
		    }
		}
		
		#Windows Top 10 Processes
		function WINDOWS_TOPPROCESS {
		    try {
		        $topprocess = Get-WmiObject Win32_PerfFormattedData_PerfProc_Process | 
		        where-object { $_.Name -ne "_Total" -and $_.Name -ne "Idle" } | 
		        Sort-Object PercentProcessorTime -Descending | 
		        Select-Object Name, PercentProcessorTime -First 5
                If($topprocess) {
                    forEach($topp in $topprocess) {
                        $topprocsrv += $topp.Name + "(" + $topp.PercentProcessorTime+ "%)" + "|"
                        }
                    $topprocstatus = "$topprocsrv"
                }  
		        $global:objectProperty.Add("Top5Processes", $topprocstatus )
		    }
		    catch {
		        $global:objectProperty.Add("Top5Processes", "Code execution failed")	
		    }
		}
		
		
		#Top hotfixes
		function WINDOWS_TOPHOTFIXES {
		    try {
		        $hotfixs = @()
		        $hotfixes = Get-HotFix -ea stop | 
		        Select-Object HotfixID, Description -First 5 
		        
                If($hotfixes) {
                    forEach($hfix in $hotfixes) {
                        $hotfixes += $hfix.HotfixID + "(" + $hfix.Description+ ")" + "|"
                        }
                    $hotfixstatus = "$hotfixes"
                }  
		
		        $global:objectProperty.Add("Top5Hotfixes", $hotfixstatus )
		    }
		    catch {
		        $global:objectProperty.Add("Top5Hotfixes", "Code execution failed")	
		    }
		}
			        
        #Last 10 App events
		function WINDOWS_TOPAPPEVENTS {
		    try {
		        $Appevents = Get-WinEvent -LogName Application -MaxEvents 10  | Select-Object Id, @{n = 'Message' ; e={$_.message.split("`r")[0].trim()}} 
		        If($Appevents){
                    ForEach ($aevent in $Appevents){ 
                        $aeventsrv += $aevent.Message + "(Id: " + $aevent.Id+ ")" + "|"
                    
                } 
                    $aeventstatus = "$aeventsrv"
                }
                $global:objectProperty.Add("Top10AppEventlogs", $aeventstatus )
		    }
		    catch {
		        $global:objectProperty.Add("Top10AppEventlogs", "Code execution failed")	
		    }
		}
		
		
		# NIC Configurations/IP Information
		function WINDOWS_NICCONFIG {
        $ipaddsrv=@()
		    try {
		        
		        $ipaddr = Get-NetIPConfiguration | Get-NetIPAddress -AddressFamily IPv4 | Select-Object IPAddress, InterfaceAlias
                If($ipaddr){
                    ForEach ($ip in $ipaddr){ 
                        $ipaddsrv += $ip.IPAddress + "(" + $ip.InterfaceAlias+ ")" + "|"
                    
                } 
                    $Nicstatus = "$ipaddsrv"
                }                
		
		        $global:objectProperty.Add("NICConfiguration", $Nicstatus)
		    }
		    catch {
		        $global:objectProperty.Add("NICConfiguration", "Code execution failed")	
		    }
		}  

		#Hardware configuration
        function WINDOWS_HARDWARECONFIG {
            try {
                $ComputerHW = Get-WmiObject -Class Win32_ComputerSystem -ComputerName localhost
                $model = $ComputerHW.Model
                $manufacturer = $ComputerHW.Manufacturer
                $ComputerCPU = Get-WmiObject win32_processor
                $cputype = $ComputerCPU.name
                $Meminstalled = Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum | Foreach { "{0:N2}" -f ([math]::round(($_.Sum / 1GB), 2)) }
                $ComputerOSname = (Get-WmiObject Win32_OperatingSystem).caption
                $ComputerOSversion = (Get-WmiObject Win32_OperatingSystem).version
                $DriversOS = Get-WmiObject Win32_PnPSignedDriver

                $Hardware = New-Object System.Object
                $Hardware | Add-Member -MemberType NoteProperty -Name  "ServerModel" -Value $model
                $Hardware | Add-Member -MemberType NoteProperty -Name  "Manufacturer" -Value $manufacturer
                $Hardware | Add-Member -MemberType NoteProperty -Name  "Operating System" -Value $ComputerOSname
                $Hardware | Add-Member -MemberType NoteProperty -Name  "OSVersion" -Value $ComputerOSversion
                $Hardware | Add-Member -MemberType NoteProperty -Name  "CPUtype" -Value $cputype
                $Hardware | Add-Member -MemberType NoteProperty -Name  "TotalinstalledRAM" -Value $Meminstalled

   
                $Hardwareconfig = $Hardware.psobject.properties | foreach -begin { $j = @{ } } -process { $j."$($_.Name)" = $_.Value } -end { $j }
                $Global:objectProperty.Add('HardwareConfig', $Hardwareconfig)
            }
            catch {
                $Global:objectProperty.Add('HardwareConfig', "Code execution failed")	
            }
        }  


        if ($windowsConfigItem -like '*|*') {

            $configItems = $windowsConfigItem.Split('|')

            foreach ($item in $configItems) {
                try {
                    invoke-expression $item -ea silentlycontinue
                }
                catch {
                    $Global:objectProperty.Add($item, "Incorrect function")	
                }
	      
            }
        }
        elseif ($windowsConfigItem -like "NA*") {
            $windowsConfigItem = 'CLUSTER|CPU|DISK|MEMORY|WINDOWS_IIS|IISLogs|WINDOWS_SQLSERVER|WINDOWS_AUTOSERVICE|WINDOWS_PATCHES|WINDOWS_SCHEDULEDTASK'
            $configItems = $windowsConfigItem.Split('|')

            foreach ($item in $configItems) {
                try {
                    invoke-expression $item -ea silentlycontinue
                }
                catch {
                    $Global:objectProperty.Add($item, "Incorrect function")
                }
            }
	
        }
        else {
            try {
                invoke-expression $windowsConfigItem -ea silentlycontinue
            }
            catch {
                $Global:objectProperty.Add("Incorrectfunction", "Incorrect function")
            }
        }


        #$global:objectProperty

        $finalOutput = @()
        $finalOutput = New-Object -TypeName psobject -Property $objectProperty

        $finalOutput | ConvertTo-Json -Depth 4
	
	
    } -ArgumentList ($windowsConfigItems) -SessionOption (New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck) -ErrorAction Stop
}
Catch {
	   $global:objectProperty = @{ }

    $global:objectProperty.Add('Status', "Resolve Connectivity issue for server $INPUT{COMPUTERNAME} ")
    $finalOutput = @()
    $finalOutput = New-Object -TypeName psobject -Property $objectProperty

    $finalOutput | ConvertTo-Json -Depth 4
}



##########################################################################

######ESXI healthcheck###########


if(!(Get-Module -Name VMware.VimAutomation.Core))
{
    Import-Module -Name VMware.VimAutomation.Core

    if(!$?){ throw "Could not load VMware.VimAutomation.Core" }
}

#Declaration of the variables
[ValidateNotNullOrEmpty()]
$varpd                        =   ConvertTo-SecureString '$INPUT{PASSWORD}' -AsPlainText -Force

[ValidateNotNullOrEmpty()]
[string]$varUsername                =  '$INPUT{USERNAME}'

[ValidateNotNullOrEmpty()]
$VarVcenter                         =  '$INPUT{VCENTER}'

#Credentials
$varCredentials                     =  New-Object System.Management.Automation.PSCredential($varUsername, $varpd )
$VarVcenter                         =  $VarVcenter.trim()

$mulvalues='$INPUT{HOSTNAME}'

$connectedServer                    = $global:defaultviserver

	$global:objectesxiPropertyserver =  @{}
    $global:objectesxiProperty=@{}

$insMethod	= '$INPUT{INSMETHOD}'
$totalsrv 	= '$INPUT{TOTSERVERS}'
$ukey     	= '$INPUT{UNIQUEKEY}'
$udate     	= '$INPUT{REQDATE}'

#DB Credentials
$DB_USERNAME      = '$INPUT{DB_USERNAME}'
$DB_USER_PASSWORD = '$INPUT{DB_PASSWORD}'
$DB_HOST          = '$INPUT{DB_HOSTNAME}'

#This funtion is to Disconnect the Vcenter Server
function DisconnectVcenter ([string] $vCenter){
    # Disconnect from the current vCenter    
    Try{
        DisConnect-VIServer $vCenter -Confirm:$false  -Force  -ErrorAction Stop
        #Write-host   "------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
        write-host "$vCenter session disconnected"
        }
    catch{
        write-host "$vCenter session already Disconnected"
    	}     
}

#This function is for establishing the Connection the Vcenter Server
function ConnectVcenter([string]$vCenter ){
	
        # Connect to the vCenter get the needed hashed credentails 
        try{
			Connect-VIServer -Server $Vcenter -credential $varCredentials -ea Stop
			$global:objectesxiProperty.Add('vCenterConnect',"$($vCenter) Connected Successfully")
		}
		catch {
			[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls
			try{
				Connect-VIServer -Server $Vcenter -credential $varCredentials -ea Stop
			}
			catch {
				$global:objectesxiProperty.Add('vCenterConnect',"Connectivity Issue with the vcenter Server $($Vcenter)")
			}
		}        
       
}

function Test-WebServerSSL {
[CmdletBinding()]
    param(
        [Parameter(Mandatory = $true, ValueFromPipeline = $true, Position = 0)]
        [string]$URL,
        [Parameter(Position = 1)]
        [ValidateRange(1,65535)]
        [int]$Port = 443,
        [Parameter(Position = 2)]
        [Net.WebProxy]$Proxy,
        [Parameter(Position = 3)]
        [int]$Timeout = 15000,
        [switch]$UseUserContext
    )
 @"
using System;
using System.Net;
using System.Security.Cryptography.X509Certificates;
namespace PKI {
    namespace Web {
        public class WebSSL {
            public Uri OriginalURi;
            public Uri ReturnedURi;
            public X509Certificate2 Certificate;
            //public X500DistinguishedName Issuer;
            //public X500DistinguishedName Subject;
            public string Issuer;
            public string Subject;
            public string[] SubjectAlternativeNames;
            public bool CertificateIsValid;
            //public X509ChainStatus[] ErrorInformation;
            public string[] ErrorInformation;
            public HttpWebResponse Response;
        }
    }
}
"@
    $ConnectString = "https://$url`:$port"
    $WebRequest = [Net.WebRequest]::Create($ConnectString)
    $WebRequest.Proxy = $Proxy
    $WebRequest.Credentials = $null
    $WebRequest.Timeout = $Timeout
    $WebRequest.AllowAutoRedirect = $true
    [Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}
    try {$Response = $WebRequest.GetResponse()}
    catch {}
    if ($WebRequest.ServicePoint.Certificate -ne $null) {
        $Cert = [Security.Cryptography.X509Certificates.X509Certificate2]$WebRequest.ServicePoint.Certificate.Handle
        try {$SAN = ($Cert.Extensions | Where-Object {$_.Oid.Value -eq "2.5.29.17"}).Format(0) -split ", "}
        catch {$SAN = $null}
        $chain = New-Object Security.Cryptography.X509Certificates.X509Chain -ArgumentList (!$UseUserContext)
        [void]$chain.ChainPolicy.ApplicationPolicy.Add("1.3.6.1.5.5.7.3.1")
        $Status = $chain.Build($Cert)
        $sha = $Cert.SignatureAlgorithm.FriendlyName;
    $uptime = Get-VMHost -Name $URL|Select @{N="Uptime"; E={New-Timespan -Start $_.ExtensionData.Summary.Runtime.BootTime -End (Get-Date) | Select -ExpandProperty Days}}

 

	    $ConnectionInformation = New-Object PSObject -Property ([Ordered]@{ 
             OriginalUri = $ConnectString; 
             ReturnedUri = $Response.ResponseUri; 
             Certificate = [Security.Cryptography.X509Certificates.X509Certificate2]$WebRequest.ServicePoint.Certificate; 
             Issuer = $WebRequest.ServicePoint.Certificate.Issuer; 
             Subject = $WebRequest.ServicePoint.Certificate.Subject; 
             SubjectAlternativeNames = $SAN; 
             CertificateIsValid = $Status;
             SignatureAlgorithm = $sha;
             Response = $Response;
             ErrorInformation = $chain.ChainStatus | ForEach-Object {$_.Status} 
             ServerUptimeInDays = $uptime.uptime
         })
         $ConnectionInformation.PSObject.TypeNames.Add("Indented.LDAP.ConnectionInformation")
         $ConnectionInformation
        }
        #$chain.Reset()
        [Net.ServicePointManager]::ServerCertificateValidationCallback = $null
    } 

function CollectHostDetails($vmHost,$vcenter){

#Write-host "Validating for  $esxiHost "
try {
	$esxHost = Get-VMHost -Name $vmHost -ea stop
	if ($global:objectesxiProperty.ContainsKey("EsxiStatus")) {
        $global:objectesxiProperty["EsxiStatus"] = "$vmHost Found in $vCenter"
        }
    else {
        $global:objectesxiProperty.Add('EsxiStatus',"$vmHost Found in $vCenter")
        }
	}
catch {
	if ($global:objectesxiProperty.ContainsKey("EsxiStatus")) {
        $global:objectesxiProperty["EsxiStatus"] = "$vmHost not found in $vCenter"
        }
    else {
        $global:objectesxiProperty.Add('EsxiStatus',"$vmHost not found in $vCenter")
        }
	}
try {

$esxview = Get-View -ViewType HostSystem -Filter @{'Name'=$vmHost}
$Uptime = $esxview | Select-Object Name, @{N="UptimeDays"; E={((((get-date) - ($_.runtime).BootTime).TotalDays).Tostring()).Substring(0,2)}}
$AvgMem = [math]::Round(($esxHost.MemoryUsageGB) / ($esxHost.MemoryTotalGB) * 100,2)
$AvgCPU = [math]::Round(($esxHost.CpuUsageMhz) / ($esxHost.CpuTotalMhz) * 100,2)
$ServiceTag = $esxview | Select-Object name, @{N="Serial" ; E= { $PSItem.Summary.Hardware.OtherIdentifyingInfo | where {$PSItem.IdentifierType.Key -eq "ServiceTag" } | % { $PSItem.IdentifierValue }  } } 
$Vmotionevents =@()
try {
	$Vmotionevents = $esxHost | Get-VM | Get-VIEvent -Types Info,Error,Warning -Start (get-date).AddDays(-2) | Where-Object {$_.FullFormattedMessage -like "Migrat*"} | Select-Object CreatedTime,FullFormattedMessage
	if($Vmotionevents){

	 }
else 
	 {
	 $Vmotionevents= "last 2 days No guest Vmotion found"
	
	 }
	  }

catch {
	 $Vmotionevents= "last 2 days No guest Vmotion found"
	}

try {
    $Datastoreinfo = $esxhost | Get-Datastore | Select @{N="DataStoreName";E={$_.Name}},@{N="TotalCapacityGB";E={[math]::Round(($_.CapacityGB)/1024,2)}},@{N="FreeSpaceGB";E={[math]::Round(($_.FreeSpaceGB)/1024,2)}},@{N="PercentageFreeSpace";E={[math]::Round(($_.FreeSpaceGB)/($_.CapacityGB)*100,2)}}
    $lcount  = 0
    foreach($dsinfo in $Datastoreinfo) {
    
        If($dsinfo.PercentageFreeSpace -le 20) {
        $lcount ++
        }
    }
    $dshealth = "$lcount datastores with below 20% freespace"
}
catch {
    $dshealth="Error in Fetching Datastore details"
}

try
{
$hostNetwork = Get-VMHostNetworkAdapter -VMHost $esxHost -ea stop
}
catch
{
$hostnetwork="Error in Fetching Adapter details"
}


[ARRAY]$HBAs = $esxHost | Get-VMHostHba -Type "FibreChannel"
            foreach ($HBA in $HBAs) {
    $pathState = $HBA | Get-ScsiLun | Get-ScsiLunPath | Group-Object -Property state
    $pathStateActive = $pathState | ? { $_.Name -eq "Active"}
    $pathStateDead = $pathState | ? { $_.Name -eq "Dead"}
    $pathStateStandby = $pathState | ? { $_.Name -eq "Standby"}
    }

 $esxialerts = Get-VIEvent -Entity $esxHost -MaxSamples ([int]::MaxValue) -Types Error, Warning -Start (Get-Date).AddDays(-2)| select CreatedTime, FullFormattedMessage
 If($esxialerts) {
 	$esxialerts = $esxialerts
 }
 else {
 	$esxialerts="last 2 days No Alerts found "
  } 
 	
$warninglogs = (Get-Log -VMHost ($esxHost) vmkernel).Entries | Where {$_ -like "*WARNING*"}|select -Last 3
If ($warninglogs) {
} 
else {
	$warninglogs="Esxi VMKernal No WARNING logs for last 3 days "

	}

$failedlogs = (Get-Log -VMHost ($esxHost) vmkernel).Entries | Where {$_ -like "*Failed*"}|select -Last 3
if($failedlogs) {

 }
else { $failedlogs="Esxi VMKernal No Failed logs for last 3 days "}

$multipolicy = $esxHost | foreach {Get-ScsiLun -LunType disk -VmHost $_} | select-object vmhost,canonicalname,multipathpolicy

$fcount  = 0
$rcount  = 0
foreach($mpolicy in $multipolicy) {
    
    If($multipolicy.MultipathPolicy -eq 'Fixed') {
        $fcount ++
    }
    else {
        $rcount ++
    }
}
$multipathpolicyStatus = "$fcount Luns in Fixed and $rcount in RoundRobin"


$HostNTPRusnning = $esxview | select Name -ExpandProperty Name| Select-Object @{N= "ServiceRunning";E={(Get-VmHostService -VMHost $PSItem |Where-Object {$PSItem.key -eq "ntpd"}).Running}} 

$refdate = (Get-Date).AddDays(-2)
    $checkpatches = (Get-EsxCli -V2 -VMHost $esxHost).software.vib.list.Invoke()| Where-Object {(get-date ($_.InstallDate)) -ge $refdate} | select InstallDate 
    $lastpatched = $checkpatches.InstallDate | Sort-Object -Descending | Select-Object -First 1
    $lastpatched = '{0:dd-MM-yyyy}' -f [DateTime]$lastpatched

    If ($lastpatched -ne "01-01-0001") {
        $recentpatches = "Last patched on $lastpatched"
        }
    else {
        $recentpatches = "Last 48 hours no recent patches found"
    }


$HostServices = $esxHost| Get-VMHostService 
$nserv=@()
$nruncount = 0
$HostServicesReportView  = @()
ForEach ($HostServic in $HostServices){ 
			        $HostServicesReport = [PSCustomObject] @{
					        Key = $HostServic.key
					        Label = $HostServic.Label
					        Policy = $HostServic.Policy
					        Running = $HostServic.Running
					        Required = $HostServic.Required
					        }
                    If($HostServic.Running -cmatch 'False') {
                        $nruncount ++
                        $nserv += $HostServic.Key + "|"
                    }
                    #$HostServicesReportView += $HostServicesReport
			        } 

$esxiServiceStatus = "$nruncount services in NotRunning State ($nserv)"

$NTPServers     = Get-VMHostNtpServer -VMHost $esxHost.name
$Uptime = $esxview | Select-Object Name, @{N="UptimeDays"; E={((((get-date) - ($_.runtime).BootTime).TotalDays).Tostring()).Substring(0,2)}}
$counter       = (Get-VMHost $esxview.Name | get-VM).Count


#Get ESXi Host DNS info
$DNS  =  Get-VMHostNetwork -VMHost $esxview.Name | Select-Object Hostname,DNSAddress

$Certificates  = Test-WebServerSSL -URL $esxview.Name -ea SilentlyContinue | where {$psitem.OriginalUri  -ne $null}|  Select-Object OriginalURi, CertificateIsValid, Issuer, @{N="Expires";E={$PSItem.Certificate.NotAfter} }, @{N="DaysTillExpire";E={(New-TimeSpan -Start (Get-Date) -End ($PSItem.Certificate.NotAfter)).Days} }
$CertCheck     = $Certificates | Where-Object {$PSItem.daystillexpire -lt "90" -or $PSItem.CertificateIsValid -ne "True"} |select -Unique | Sort-Object daystillexpire -Descending
#Test-WebServerSSL -URL $_.Name | Select OriginalURi, CertificateIsValid, Issuer, SignatureAlgorithm, ServerUptimeInDays, @{N="Expires";E={$_.Certificate.NotAfter} }, @{N="DaysTillExpire";E={(New-TimeSpan -Start (Get-Date) -End ($_.Certificate.NotAfter)).Days} }| where {$_.OriginalURi -like "http*"}}
[string]$powerstate = $esxview.runtime.PowerState
$esxconfig = New-Object System.Object
$esxconfig | Add-Member -MemberType NoteProperty -Name  "vCenter" -Value $global:defaultviserver.Name
$esxconfig | Add-Member -MemberType NoteProperty -Name  "ParentHost" -Value $esxview.Name
$esxconfig | Add-Member -MemberType NoteProperty -Name  "Cluster" -Value $esxHost.Parent.Name
$esxconfig | Add-Member -MemberType NoteProperty -Name  "Powerstate" -Value $powerstate
$esxconfig | Add-Member -MemberType NoteProperty -Name  "esxiVersion" -Value $esxview.config.Product.Version
$esxconfig | Add-Member -MemberType NoteProperty -Name  "Build" -Value $esxview.config.Product.Build
$esxconfig | Add-Member -MemberType NoteProperty -Name  "vendor" -Value $esxview.hardware.SystemInfo.Vendor
$esxconfig | Add-Member -MemberType NoteProperty -Name  "model" -Value $esxview.hardware.SystemInfo.Model
$esxconfig | Add-Member -MemberType NoteProperty -Name  "cpuModel" -Value $esxview.Summary.Hardware.CpuModel
$esxconfig | Add-Member -MemberType NoteProperty -Name  "ServiceTag" -Value $ServiceTag.Serial
$esxconfig | Add-Member -MemberType NoteProperty -Name  "MemorySizeGB" -Value ("{0:N0}" -f ($esxview.Summary.Hardware.MemorySize/1GB))
$esxconfig | Add-Member -MemberType NoteProperty -Name  "MemoryUsageGB" -Value ("{0:N2}" -f ($esxview.Summary.QuickStats.OverallMemoryUsage /1024))
$esxconfig | Add-Member -MemberType NoteProperty -Name  "NumCpuCores" -Value $esxview.Summary.Hardware.NumCpuCores
$esxconfig | Add-Member -MemberType NoteProperty -Name  "CoresPerSocket" -Value ($esxview.Summary.Hardware.NumCpuCores/$esxview.Summary.Hardware.NumCpuPkgs)
$esxconfig | Add-Member -MemberType NoteProperty -Name  "vMotionEvents" -Value $Vmotionevents
$esxconfig | Add-Member -MemberType NoteProperty -Name  "networkStatus" -Value ([Math]::Round((($esxHost | Get-Stat -Stat net.usage.average -Start (Get-Date).AddDays(-30) -IntervalMins 5 | Measure-Object Value -Average).Average),2))
$esxconfig | Add-Member -MemberType NoteProperty -Name  "HAEnabled" -Value $esxHost.Parent.HAEnabled
$esxconfig | Add-Member -MemberType NoteProperty -Name  "mgmtNetwork" -Value ($hostNetwork | where {$_.Name -eq "vmk0"}).IP
$esxconfig | Add-Member -MemberType NoteProperty -Name  "vMotionEnabled" -Value ($hostNetwork | Where-Object {$_.Name -eq "vmk0"}).VMotionEnabled
$esxconfig | Add-Member -MemberType NoteProperty -Name  "HAStatus" -Value $esxview.Runtime.DasHostState.State
$esxconfig | Add-Member -MemberType NoteProperty -Name  "avgCPU" -Value $AvgCPU%
$esxconfig | Add-Member -MemberType NoteProperty -Name  "avgMemory" -Value $AvgMem%
$esxconfig | Add-Member -MemberType NoteProperty -Name  "drsEnabled" -Value $esxHost.Parent.HAEnabled
$esxconfig | Add-Member -MemberType NoteProperty -Name  "datastoreHealth" -Value $dshealth
$esxconfig | Add-Member -MemberType NoteProperty -Name  "datastoreDead" -Value $pathStateDead.count
$esxconfig | Add-Member -MemberType NoteProperty -Name  "datastoreActive" -Value $pathStateActive.Count
$esxconfig | Add-Member -MemberType NoteProperty -Name  "datastoreStandby" -Value $pathStateStandby.count
$esxconfig | Add-Member -MemberType NoteProperty -Name  "esxiAlerts" -Value $esxialerts
$esxconfig | Add-Member -MemberType NoteProperty -Name  "multipathpolicyStatus" -Value $multipathpolicyStatus
$esxconfig | Add-Member -MemberType NoteProperty -Name  "recentPatches" -Value $recentpatches
$esxconfig | Add-Member -MemberType NoteProperty -Name  "esxiServiceStatus" -Value $esxiServiceStatus
$esxconfig | Add-Member -MemberType NoteProperty -Name  "failedLogs" -Value $failedlogs
$esxconfig | Add-Member -MemberType NoteProperty -Name  "BiosVersion" -Value $esxview.Hardware.BiosInfo.BiosVersion
$esxconfig | Add-Member -MemberType NoteProperty -Name  "warningLogs" -Value $warninglogs
$esxconfig | Add-Member -MemberType NoteProperty -Name  "EVCMode" -Value $esxview.Summary.CurrentEVCModeKey
$esxconfig | Add-Member -MemberType NoteProperty -Name  "MaxEVC" -Value $esxview.Summary.MaxEVCModeKey
$esxconfig | Add-Member -MemberType NoteProperty -Name  "isNTPRunning" -Value $HostNTPRusnning.ServiceRunning
$esxconfig | Add-Member -MemberType NoteProperty -Name  "NTPServers" -Value ($NTPServers -join ',')
$esxconfig | Add-Member -MemberType NoteProperty -Name  "UpTimeDays" -Value $Uptime.UptimeDays
$esxconfig | Add-Member -MemberType NoteProperty -Name  "NumVMs" -Value $counter
$esxconfig | Add-Member -MemberType NoteProperty -Name  "DNSServers" -Value ($DNS.DNSAddress[0] + "," + $DNS.DNSAddress[1])
$esxconfig | Add-Member -MemberType NoteProperty -Name  "OriginalURi" -Value $Certificates.OriginalURi
$esxconfig | Add-Member -MemberType NoteProperty -Name  "CertIssuer" -Value $Certificates.Issuer
$esxconfig | Add-Member -MemberType NoteProperty -Name  "CertIsValid" -Value  $CertCheck.CertificateIsValid
$esxconfig | Add-Member -MemberType NoteProperty -Name  "CertExpires" -Value $Certificates.Expires.DateTime
$esxconfig | Add-Member -MemberType NoteProperty -Name  "CertDaysToExpire" -Value $CertCheck.daystillexpire
$esxconfigout = $esxconfig.psobject.properties | foreach -begin {$h=@{}} -process {$h."$($_.Name)" = $_.Value} -end {$h}

if ($global:objectesxiProperty.ContainsKey("ESXiConfiginfo")) {
        $global:objectesxiProperty["ESXiConfiginfo"] = $esxconfigout
        }
    else {
        $global:objectesxiProperty.Add('ESXiConfiginfo',$esxconfigout)
        }
        
$finalOutput = New-Object -TypeName psobject -Property $objectesxiProperty
$out = $finalOutput | ConvertTo-Json
return $out
}
catch {
	$cError = "ERROR Unable to Fetch Esxi Configurations in $($vmHost)"
	
	if ($cError) {
            if ($global:objectesxiProperty.ContainsKey("ESXiConfiginfo")) {
                $global:objectesxiProperty["ESXiConfiginfo"] = $cError
            }
            else {
                $global:objectesxiProperty.Add("ESXiConfiginfo", $cError)
            }
        }
	}
$finalOutput = New-Object -TypeName psobject -Property $objectesxiProperty
$out = $finalOutput | ConvertTo-Json
return $out
   
}


function CollectVMDetails($vmMachine,$vcenter){

#Write-host "Validating for  $vmMachine "
try {
	$vmview  =  Get-View -ViewType VirtualMachine -Filter @{'Name'=$vmMachine}

if ($global:objectesxiProperty.ContainsKey("VMStatus")) {
        $global:objectesxiProperty["VMStatus"] = "$vmMachine Found in $vCenter"
        }
    else {
        $global:objectesxiProperty.Add('VMStatus',"$vmMachine Found in $vCenter")
        }
    }
catch {
		if ($global:objectesxiProperty.ContainsKey("VMStatus")) {
        $global:objectesxiProperty["VMStatus"] = "$vmMachine not found in $vCenter"
        }
    else {
        $global:objectesxiProperty.Add('VMStatus',"$vmMachine not found in $vCenter")
        }
    }

function Get-OptimalvCPU
{
    [cmdletbinding()]
    Param
    (
        [Parameter(Mandatory=$false)]$vmName,
        [Parameter(Mandatory=$false)][switch]$simple
    )

    $nameFilter = ""
    $vmFilter = @{'Config.Template'='False'}
    $hostFilter = @{'Runtime.ConnectionState'='connected';'Runtime.PowerState'='poweredOn'}
    $results = @()
    $vms = @()
    Write-Verbose "Retrieving VMs information - Skipping Disconnected, Powered Off, or Template VMs"

    Try
    {
        If ($VMName -ne $null)
        {
            foreach ($name in $VMName)
            {
                $nameFilter += "$name|"
            }
            $nameFilter = $nameFilter.TrimEnd("|")
            $vmFilter += @{"Name" = $nameFilter}
        }
        #gets VM information
        $vms = get-view -ViewType VirtualMachine -Filter $vmFilter -Property Name,Config.Hardware.MemoryMB,Config.Hardware.NumCPU,Config.Hardware.NumCoresPerSocket,Config.CpuHotAddEnabled,Config.Version,Config.ExtraConfig,Runtime.Host,Summary.Runtime.PowerState | 
            select Name, @{n='MemoryGB'; e={[math]::Round(($_.Config.Hardware.MemoryMB / 1024),2)}},@{n='Sockets';e={($_.Config.Hardware.NumCPU)/($_.Config.Hardware.NumCoresPerSocket)}},@{n='CoresPerSocket'; 
            e={$_.Config.Hardware.NumCoresPerSocket}},@{n='NumCPU';e={$_.Config.Hardware.NumCPU}},@{n='CpuHotAdd';e={$_.Config.CpuHotAddEnabled}},@{n='HWVersion';e={$_.Config.Version}},@{n='HostId';
            e={$_.Runtime.Host.Value}},@{n='vCenter';e={([uri]$_.client.ServiceUrl).Host}},@{n='NumaVcpuMin';e={($_.Config.ExtraConfig | where {$_.Key -eq "numa.vcpu.min"}).Value}},@{n='PowerState';e={$_.Summary.Runtime.PowerState}}
        If($vms -eq $null)
        {
            Throw "No VMs found, or VMs are not powered on, or connected"
        }
    }
    Catch
    {
        Write-Error -Message "Error retrieving VM information: $($_.Exception.Message) at line $($_.InvocationInfo.ScriptLineNumber)"
        break
    }
    
    Try
    {
        Write-Verbose "Retrieving Host information. Skipping Disconnected or Powered Off Hosts"
        If ($VMName -ne $null)
        {
            $hostsUnique = $vms | Select @{n="Id";e={"HostSystem-" + "$($_.HostId)"}},vCenter | Sort-Object -Property @{e="Id"},@{e="vCenter"} -Unique
            $hostCommand = {get-view -Id $($hostsUnique.Id) -Property Name,Parent,Config.Product.Version,Config.HyperThread,Hardware.MemorySize,Hardware.CpuInfo,Config.PowerSystemInfo.CurrentPolicy.Key,Config.Option}
        }
        Else
        {
            $hostCommand = {get-view -ViewType HostSystem -Filter $hostFilter -Property Name,Parent,Config.Product.Version,Config.HyperThread,Hardware.MemorySize,Hardware.CpuInfo,Config.PowerSystemInfo.CurrentPolicy.Key,Config.Option}
        }
    
        $vmHosts = Invoke-Command $hostCommand | select Name,@{n='Id';e={$_.MoRef.Value}},@{n='Version';e={$_.Config.Product.Version}},@{n='vCenter';e={([uri]$_.Client.serviceurl).Host}},@{n="ClusterId";
            e={$_.Parent | Where{$_.Type -eq "ClusterComputeResource"} | select -expand Value}},@{n='MemoryGB';e={[int](($_.Hardware.MemorySize)/1073741824)}},@{n="MemPerChannel";
            e={[int](($_.Hardware.MemorySize)/1073741824) / ($_.Hardware.CpuInfo.NumCpuPackages)}},@{n='Sockets';e={($_.Hardware.CpuInfo.NumCpuPackages)}},@{n='CoresPerSocket';
            e={($_.Hardware.CpuInfo.NumCPUCores)/$($_.Hardware.CpuInfo.NumCpuPackages)}},@{n='CPUs';e={$_.Hardware.CpuInfo.NumCPUCores}},@{n='CpuThreads';e={($_.Hardware.CpuInfo.NumCpuThreads)}},@{n='HTActive';
            e={$_.Config.HyperThread.Active}},@{n='NumaVcpuMin'; e={$_.Config.Option | where {$_.Key -eq "numa.vcpu.min"}}},@{n='PowerPolicy'; 
            e={
                switch($_.Config.PowerSystemInfo.CurrentPolicy.Key)
                {
                    "1" {"HighPerformance"}
                    "2" {"Balanced"}
                    "3" {"LowPower"}
                    "4" {"Custom"}
                }
               }
        }
    }
    Catch
    {
        Write-Error -Message "Error retrieving Host information: $($_.Exception.Message) at line $($_.InvocationInfo.ScriptLineNumber)"
        break
    }

    Try
    {
        Write-Verbose "Retrieving Cluster information" 
        $clustersUnique = $vmHosts | Where{$_.ClusterId -ne $null} | Select @{n="Id";e={"ClusterComputeResource-" + "$($_.ClusterId)"}},vCenter | Sort-Object -Property @{e="Id"},@{e="vCenter"} -Unique
        #accounts for hosts with no cluster
        If ($clustersUnique -ne $Null)
        {
            $clusters = get-view -Id $($clustersUnique.Id) -Property Name | Select Name,@{n="Id";e={$_.MoRef.Value}},@{n="vCenter";
                e={([uri]$_.Client.serviceurl).Host}},MinMemoryGB,MinSockets,MinCoresPerSocket -ErrorAction Stop
 
            foreach ($cluster in $clusters)
            {
                $clusterHosts = $vmHosts | Where{($_.vCenter -eq $cluster.vCenter) -and $_.clusterID -eq $cluster.Id} | select Name,Id,MemoryGB,Sockets,CoresperSocket
                $cluster.MinMemoryGB = ($clusterHosts.MemoryGB | measure -Minimum).Minimum
                $cluster.MinSockets = ($clusterHosts.Sockets | measure -Minimum).Minimum
                $cluster.MinCoresPerSocket = ($clusterHosts.CoresPerSocket | measure -Minimum).Minimum
            }
        }
    }
    Catch
    {
        Write-Error -Message "Error retrieving Cluster information: $($_.Exception.Message) at line $($_.InvocationInfo.ScriptLineNumber)"
        break
    }

    #process VM calculations
    $vmCount = ($vms | Measure-Object).Count
    Write-Verbose "Calculating Optimal vCPU settings for $vmCount VMs"
    $n = 1
    foreach ($vm in $vms)
    {
        $vmsPercent = [math]::Round(($n / $vmCount) * 100)
        Write-Progress -Activity "Calculating Optimum vCPU Config for VMs" -Status "$vmsPercent% Complete:" -PercentComplete $vmsPercent -CurrentOperation "Current VM: $($vm.Name)"
            
        $priorities = @() 
        $priorities += 0   
        $details = ""
        $pNumaNotExpDetails = ""
        

        $vmHost = $vmHosts | where {$($_.vCenter) -eq $($vm.vCenter) -and $($_.Id) -eq $($vm.HostId)} | select -first 1

        If ($vmHost.ClusterId -eq $null)
        {
            $cluster = "" | Select Name,MinMemoryGB,MinSockets,MinCoresPerSocket
        }
        Else
        {
            $cluster = $clusters | Where{($($_.Id) -eq $($vmHost.ClusterId)) -and ($($_.vCenter) -eq $($vmHost.vCenter))} | Select Name,MinMemoryGB,MinSockets,MinCoresPerSocket | select -first 1
        }
        Try
        {
            #flags if vmMemory spans pNUMA node
            If ($vm.MemoryGB -gt $vmHost.MemPerChannel)
            {
                $memWide = $true
                $memWideDetail = "memory"
            }
            Else
            {
                $memWide = $false
                $memWideDetail = ""
            } 
            #flags if vCPUs span pNUMA node
            If ($vm.NumCPU -gt $vmHost.CoresPerSocket)
            {
                $cpuWide = $true
                $cpuWideDetail = "CPU"
            }
            Else
            {
                $cpuWide = $false
                $cpuWideDetail = ""
            }
        
            #if #vCPUs is odd and crosses pNUMA nodes
            If (($memWide -or $cpuWide) -and (($vm.NumCPU % 2) -ne 0))
            {
                $calcVmCPUs = $vm.NumCPU + 1
                $cpuOdd = $true
            }
            Else
            {
                $calcVmCPUs = $vm.NumCPU
                $cpuOdd = $false
            }
            #calculations for optimal vCPU
            $i = 0
            Do 
            {
                $i++
            }
            Until (
                (($vm.MemoryGB / $i -le $vmHost.MemPerChannel) -or ($calcVmCPUs / $i -eq 1)) `
                    -and (($calcVmCPUs / $i -le $vmHost.CoresPerSocket) -or ($calcVmCPUs / $i -eq 1) -or ($calcVmCPUs -eq $vmHost.CPUs)) `
                    -and (($calcVmCPUs / $i)  % 2 -eq 0 -or ($calcVmCPUs / $i)  % 2 -eq 1)
                )
            $optSockets = $i
            $optCoresPerSocket = $calcVmCPUs / $optSockets
            #flags if adjustments had to be made to the vCPUs
            If (($optSockets -ne $vm.Sockets) -or ($optCoresPerSocket -ne $vm.CoresPerSocket) -or $cpuOdd)
            {
                $cpuOpt = $false
            }
            Else
            {
                $cpuOpt = $true
            }
            #vCPUs are not optimal, but VM is not wide
            If (-not ($memWide -or $cpuWide) -and (-not $cpuOpt))
            {
                $details += "VM does not span pNUMA nodes, but consider configuring it to match pNUMA architecture | "
                $priorities += 1
            }

            ######################################################
            #if crossing pNUMA node(s), additional flags
            If (($memWide -or $cpuWide) -and (-not $cpuOpt))
            {
                If ($memWideDetail -ne "" -and $cpuWideDetail -ne "")
                {
                    $wideDetails = "$memWideDetail and $cpuWideDetail"
                }
                Else
                {
                    $wideDetails = ("$memWideDetail $cpuWideDetail").Trim()
                }
                $details += "VM $wideDetails spans pNUMA nodes and should be distributed evenly across as few as possible | "
            
                #flags if VM is crossing pNUMA nodes, and vHW version is less than 8 (pNUMA not exposed to guest) 
                $vmHWVerNo = [int]$vm.HWVersion.Split("-")[1]
                If($vmHWVerNo -lt 8)
                {
                    $pNumaNotExp = $true
                    $pNumaNotExpDetails = "(vHW < 8) "
                }
                #flags if VM is crossing pNUMA nodes, and CPUHotAdd is enabled (pNUMA not exposed to guest) 
                If($vm.CpuHotAdd -eq $true)
                {
                    $pNumaNotExp = $true
                    $pNumaNotExpDetails = $pNumaNotExpDetails + " (CpuHotAddEnabled = TRUE)"
                }
                #flags if VM is crossing pNUMA nodes, and vCPUs is less than 9 (pNUMA not exposed to guest)
                If($vm.NumCPU -lt 9 -and $vm.NumaVcpuMin -eq $null -and $vmHost.NumaVcpuMin -eq $null)
                {
                    $pNumaNotExp = $true
                    $pNumaNotExpDetails = $pNumaNotExpDetails + " (vCPUs < 9). Consider modifying advanced setting ""Numa.Vcpu.Min"" to $($vm.NumCPU) or lower. "
 
                }
                #if NumaVcpuMin has been modified
                Elseif($vm.NumaVcpuMin -ne $null -or $vmHost.NumaVcpuMin -ne $null)
                {
                    If($vm.NumaVcpuMin -ne $null)
                    {
                        $modVM = "VMValue: $($vm.NumaVcpuMin) "
                    }
                    ElseIf($vmHost.NumaVcpuMin -ne $null)
                    {
                        $modHost = "HostValue: $($vmHost.NumaVcpuMin)"
                    }
                    $modDetail = ("$modVM, $modHost").Trim(", ")

                    switch($vm.NumaVcpuMin -le $vm.NumCPU -or $vmHost.NumaVcpuMin -le $vm.NumCPU)
                    {
                        $true {$details += "vCPUs < 9, but advanced setting ""Numa.Vcpu.Min"" has been modified ($modDetail) to expose pNUMA to guest OS | "}
                        $false 
                        {
                            $pNumaNotExp = $true
                            $pNumaNotExpDetails = $pNumaNotExpDetails + " (Advanced setting ""Numa.Vcpu.Min"" is > VM vCPUs). The setting has been modified ($modDetail), but is still higher than VM vCPUs. Change the value to $($vm.NumCPU) or lower to expose pNUMA to the guest OS"
                        }
                    }
                }
                If($pNumaNotExp)
                {
                    $pNumaNotExpDetails = $pNumaNotExpDetails.Trim() 
                    $details += "VM spans pNUMA nodes, but pNUMA is not exposed to the guest OS: $pNumaNotExpDetails | "
                }
             
                #flags if VM has odd # of vCPUs and spans pNUMA nodes
                If ($cpuOdd)
                {
                    $details += "VM has an odd number of vCPUs and spans pNUMA nodes | "
                }
                $priorities += 3
            }#end if (($memWide -or $cpuWide) -and (-not $cpuOpt))

            #flags if hosts in a cluster are of different size memory or CPU
		    If ($vmhost.MemoryGB -ne $cluster.MinMemoryGB -and $vmhost.MemoryGB -ne [int]$cluster.MinMemoryGB +1 -and $vmhost.MemoryGB -ne [int]$cluster.MinMemoryGB -1 -or $vmHost.Sockets -ne $cluster.MinSockets -or $vmHost.CoresPerSocket -ne $cluster.MinCoresPerSocket -and $cluster.MinMemoryGB -ne "")
            {
                $details += "Host hardware in the cluster is inconsistent. Consider sizing VMs based on the minimums for the cluster | "
                $priorities += 2
            }
            
            #flags VMs with CPU count higher than physical cores
            If($vm.NumCPU -gt ($vmHost.Sockets * $vmHost.CoresPerSocket))
            {
                $optSockets = $hostSockets
                $optCoresPerSocket = $vmHost.CoresPerSocket
                $priorities += 2
                $details += "VM vCPUs exceed the host physical cores. Consider reducing the number of vCPUs | "
            }


            #flags if vmCoresPerSocket higher than clusterMinCoresPerSocket
             If($vm.CoresPerSocket -gt $cluster.MinCoresPerSocket)
            {
                $priorities += 2
                $details += "vmCoresPerSocket greater than smallest host coresPerSocket in Cluster, consider resizing | "
            }

            #flags if vCPU count is > 8 and Host PowerPolicy is not "HighPerformance"
            If($vm.NumCPU -gt 8 -and $vmHost.PowerPolicy -ne "HighPerformance" -and $vmHost.PowerPolicy -ne "N/A")
            {
                #$priorities += 2
                $details += 'Consider changing the host Power Policy to "High Performance" for clusters with VMs larger than 8 vCPUs | '
            } 
  
            #gets highest priority
            $highestPriority = ($priorities | measure -Maximum).Maximum
            Switch($highestPriority)
            {
                0    {$priority = "N/A"}
                1    {$priority = "LOW"}
                2    {$priority = "MEDIUM"}
                3    {$priority = "HIGH"}
            }

            #flags whether the VM is configured optimally or not
            If ($priority -eq "N/A")
            {
                $vmOptimized = "YES"
                $details += "N/A"
            }
            Else
            {
                $vmOptimized = "NO"
            }
            #creates object with data to return from function
            If ($simple -eq $true)
            {
                $objInfo = [pscustomobject]@{
                    VMName                   = $($vm.Name);
                    VMSockets                = $($vm.Sockets);
                    VMCoresPerSocket         = $($vm.CoresPerSocket);
                    vCPUs                    = $($vm.NumCPU);
                    VMPowerState             = $($vm.PowerState);
                    VMOptimized              = $vmOptimized;
                    OptimalSockets           = $optSockets;
                    OptimalCoresPerSocket    = $optCoresPerSocket;
                    Priority                 = $priority;
                    Details                  = $details.Trim("| ")
                    } #end pscustomobject
            }
            Else
            {
                $objInfo = [pscustomobject]@{
                    vCenter                  = $($vmHost.vCenter);
                    Cluster                  = $($cluster.Name);
                    ClusterMinMemoryGB       = $($cluster.MinMemoryGB);
                    ClusterMinSockets        = $($cluster.MinSockets);
                    ClusterMinCoresPerSocket = $($cluster.MinCoresPerSocket);
                    HostName	             = $($vmHost.Name);
                    ESXi_Version             = $($vmHost.Version);
                    HostMemoryGB             = $($vmHost.MemoryGB);
                    HostSockets              = $($vmHost.Sockets);
                    HostCoresPerSocket       = $($vmHost.CoresPerSocket);
                    HostCpuThreads           = $($vmHost.CpuThreads);
                    HostHTActive             = $($vmHost.HTActive);
                    HostPowerPolicy          = $($vmHost.PowerPolicy);
                    VMName                   = $($vm.Name);
                    VMHWVersion              = $($vm.HWVersion);
                    VMCpuHotAddEnabled       = $($vm.CpuHotAdd).ToString();
                    VMMemoryGB               = $($vm.MemoryGB);
                    VMSockets                = $($vm.Sockets);
                    VMCoresPerSocket         = $($vm.CoresPerSocket);
                    vCPUs                    = $($vm.NumCPU);
                    VMPowerState             = $($vm.PowerState);
                    VMOptimized              = $vmOptimized;
                    OptimalSockets           = $optSockets;
                    OptimalCoresPerSocket    = $optCoresPerSocket;;
                    Priority                 = $priority;
                    Details                  = $details.Trim("| ")
                    } #end pscustomobject
            }
            $results += $objInfo

        }
        Catch
        {
            Write-Error "Error calculationing optimal CPU for $($vm.Name): $($_.Exception.Message) at line $($_.InvocationInfo.ScriptLineNumber)"
        }
        $n++
    }#end foreach ($vm in $vms)
    Write-Progress -Activity "Calculating Optimum vCPU Config for VMs" -Completed
    Return $results
}

$vnumaconfg = Get-OptimalvCPU -vmName $vmMachine



try {
[string]$powerstate = $vmview.Summary.Runtime.PowerState
$os = $vmview.Summary.Config.GuestFullName.Trim()
[string]$toolstatus = $vmview.guest.toolsstatus

$vmconfig = New-Object System.Object
$vmconfig | Add-Member -MemberType NoteProperty -Name  "VMName" -Value $vmview.Name
$vmconfig | Add-Member -MemberType NoteProperty -Name  "Hostname" -Value $vnumaconfg.HostName
$vmconfig | Add-Member -MemberType NoteProperty -Name  "Cluster" -Value $vnumaconfg.Cluster
$vmconfig | Add-Member -MemberType NoteProperty -Name  "powerState" -Value $powerstate
$vmconfig | Add-Member -MemberType NoteProperty -Name  "IPAddress" -Value $vmview.Summary.Guest.IpAddress
$vmconfig | Add-Member -MemberType NoteProperty -Name  "OS" -Value $os
$vmconfig | Add-Member -MemberType NoteProperty -Name  "Boottime" -Value (( Get-Date )  - ( New-TimeSpan -Seconds $vmview.Summary.QuickStats.UptimeSeconds ))
$vmconfig | Add-Member -MemberType NoteProperty -Name  "TotalCPU" -Value $vmview.summary.config.numcpu
$vmconfig | Add-Member -MemberType NoteProperty -Name  "CPUAffinity" -Value  $vmview.Config.CpuAffinity
$vmconfig | Add-Member -MemberType NoteProperty -Name  "CPUHotAdd" -Value $vmview.Config.CpuHotAddEnabled
$vmconfig | Add-Member -MemberType NoteProperty -Name  "CPUShare" -Value $vmview.Config.CpuAllocation.Shares.Level
$vmconfig | Add-Member -MemberType NoteProperty -Name  "TotalMemory" -Value $vnumaconfg.VMMemoryGB
$vmconfig | Add-Member -MemberType NoteProperty -Name  "MemoryHotAdd" -Value $vmview.Config.MemoryHotAddEnabled
$vmconfig | Add-Member -MemberType NoteProperty -Name  "MemoryShare" -Value $vmview.Config.MemoryAllocation.Shares.Level
$vmconfig | Add-Member -MemberType NoteProperty -Name  "TotalNics" -Value $vmview.summary.config.numEthernetCards
$vmconfig | Add-Member -MemberType NoteProperty -Name  "OverallCpuUsage" -Value $vmview.summary.quickStats.OverallCpuUsage
$vmconfig | Add-Member -MemberType NoteProperty -Name  "MemoryUsage" -Value $vmview.summary.quickStats.guestMemoryUsage
$vmconfig | Add-Member -MemberType NoteProperty -Name  "ToolsStatus" -Value $toolstatus
$vmconfig | Add-Member -MemberType NoteProperty -Name  "ToolsVersion" -Value $vmview.config.tools.toolsversion
$vmconfig | Add-Member -MemberType NoteProperty -Name  "TimeSync" -Value $vmview.Config.Tools.SyncTimeWithHost
$vmconfig | Add-Member -MemberType NoteProperty -Name  "HardwareVersion" -Value $vmview.config.Version
$vmconfig | Add-Member -MemberType NoteProperty -Name  "MemoryLimit" -Value $vmview.resourceconfig.memoryallocation.limit
$vmconfig | Add-Member -MemberType NoteProperty -Name  "MemoryReservation" -Value $vmview.resourceconfig.memoryallocation.reservation
$vmconfig | Add-Member -MemberType NoteProperty -Name  "CPUreservation" -Value $vmview.resourceconfig.cpuallocation.reservation
$vmconfig | Add-Member -MemberType NoteProperty -Name  "CPUlimit" -Value $vmview.resourceconfig.cpuallocation.limit
$vmconfig | Add-Member -MemberType NoteProperty -Name  "CBT" -Value $vmview.Config.ChangeTrackingEnabled
$vmconfig | Add-Member -MemberType NoteProperty -Name  "Swapped" -Value $vmview.Summary.QuickStats.SwappedMemory
$vmconfig | Add-Member -MemberType NoteProperty -Name  "Ballooned" -Value $vmview.Summary.QuickStats.BalloonedMemory
$vmconfig | Add-Member -MemberType NoteProperty -Name  "Compressed" -Value $vmview.Summary.QuickStats.CompressedMemory
$vmconfig | Add-Member -MemberType NoteProperty -Name  "VMSockets" -Value $vnumaconfg.VMSockets
$vmconfig | Add-Member -MemberType NoteProperty -Name  "VMCoresPerSocket" -Value $vnumaconfg.VMCoresPerSocket
$vmconfig | Add-Member -MemberType NoteProperty -Name  "VMOptimized" -Value $vnumaconfg.VMOptimized
$vmconfig | Add-Member -MemberType NoteProperty -Name  "OptimalSockets" -Value $vnumaconfg.OptimalSockets
$vmconfig | Add-Member -MemberType NoteProperty -Name  "OptimalCoresPerSockets" -Value $vnumaconfg.OptimalCoresPerSocket
$vmconfig | Add-Member -MemberType NoteProperty -Name  "Priority" -Value $vnumaconfg.Priority
$vmconfig | Add-Member -MemberType NoteProperty -Name  "Details" -Value $vnumaconfg.Details
$vmconfigout = $vmconfig.psobject.properties | foreach -begin {$h=@{}} -process {$h."$($_.Name)" = $_.Value} -end {$h}

    if ($global:objectesxiProperty.ContainsKey("VMConfiginfo")) {
        $global:objectesxiProperty["VMConfiginfo"] = $vmconfigout
        }
    else {
        $global:objectesxiProperty.Add('VMConfiginfo',$vmconfigout)
        }

$finalOutput = New-Object -TypeName psobject -Property $objectesxiProperty
$out = $finalOutput | ConvertTo-Json
return $out
}
catch {
	$cError = "ERROR Unable to Fetch VM Configurations in $($vmMachine)"
	
	if ($cError) {
            if ($global:objectesxiProperty.ContainsKey("VMConfiginfo")) {
                $global:objectesxiProperty["VMConfiginfo"] = $cError
            }
            else {
                $global:objectesxiProperty.Add("VMConfiginfo", $cError)
            }
        }
	}
$finalOutput = New-Object -TypeName psobject -Property $objectesxiProperty
$out = $finalOutput | ConvertTo-Json
return $out
   
}


function ESXI_Insert ($inData) {

$esxiquery = @"
EXEC [Automation].[dbo].[sp_ghc_Hc_Insert]
    @uid = N'{0}',
    @currentdate = N'{1}',
    @servername = N'{2}',
    @parentHost = N'{3}',
    @cluster = N'{4}',
    @PowerState = N'{5}',
    @esxiVersion = N'{6}',
    @build = N'{7}',
    @vendor = N'{8}',
    @model = N'{9}',
    @cpuModel = N'{10}',
    @ServiceTag = N'{11}',
    @MemorySizeGB = N'{12}',
    @MemoryUsageGB = N'{13}',
    @NumCpuCores = N'{14}',
    @CoresPerSocket = N'{15}',
    @vMotionEvents = N'{16}',
    @avgNetworkUsageKbps = N'{17}',
    @HAEnabled = N'{18}',
    @mgmtNetwork = N'{19}',
    @vMotionEnabled = N'{20}',
    @HAStatus = N'{21}',
    @avgCPU = N'{22}',
    @avgMemory = N'{23}',
    @drsEnabled = N'{24}',
    @datastoreHealth = N'{25}',
    @datastoreDead = N'{26}',
    @datastoreActive = N'{27}',
    @datastoreStandby = N'{28}',
    @esxiAlerts = N'{29}',
    @multipathpolicyStatus = N'{30}',
    @recentPatches = N'{31}',
    @esxiServiceStatus = N'{32}',
    @failedLogs = N'{33}',
    @BiosVersion = N'{34}',
    @warningLogs = N'{35}',
    @physicalHardware = N'{36}',
    @EVCMode = N'{37}',
    @MaxEVC = N'{38}',
    @isNTPRunning = N'{39}',
    @NTPServers = N'{40}',
    @UpTimeDays = N'{41}',
    @NumVMs = N'{42}',
    @PowerManagementPolicy = N'{43}',
    @AvailablePowerManagePolicy = N'{44}',
    @DNSServers = N'{45}',
    @OriginalURi = N'{46}',
    @CertIssuer = N'{47}',
    @CertIsValid = N'{48}',
    @CertExpires = N'{49}',
    @CertDaysToExpire = N'{50}',
    @comments = N'{51}',
    @insmethod = N'{52}',
    @vCenter = N'{53}'
"@
	$insMethod = 'ESXI'
	$comments = "Data fetched successfully for $($inData.Name)"

    $warningLogs = [string]$inData.ESXiConfiginfo.warningLogs

    $warningLogs = $warningLogs.Replace("'","''")

	$insertSQLCMD = $esxiquery -f $ukey, $udate,$inData.Name,$inData.ESXiConfiginfo.ParentHost,$inData.ESXiConfiginfo.Cluster,$inData.ESXiConfiginfo.Powerstate,$inData.ESXiConfiginfo.esxiVersion,$inData.ESXiConfiginfo.Build,$inData.ESXiConfiginfo.vendor, $inData.ESXiConfiginfo.model,$inData.ESXiConfiginfo.cpuModel,$inData.ESXiConfiginfo.ServiceTag,$inData.ESXiConfiginfo.MemorySizeGB,$inData.ESXiConfiginfo.MemoryUsageGB,$inData.ESXiConfiginfo.NumCpuCores,$inData.ESXiConfiginfo.CoresPerSocket,$inData.ESXiConfiginfo.vMotionEvents,'NA', $inData.ESXiConfiginfo.HAEnabled,$inData.ESXiConfiginfo.mgmtNetwork,$inData.ESXiConfiginfo.vMotionEnabled,$inData.ESXiConfiginfo.HAStatus,$inData.ESXiConfiginfo.avgCPU,$inData.ESXiConfiginfo.avgMemory,$inData.ESXiConfiginfo.drsEnabled,$inData.ESXiConfiginfo.datastoreHealth, $inData.ESXiConfiginfo.datastoreDead,$inData.ESXiConfiginfo.datastoreActive,$inData.ESXiConfiginfo.datastoreStandby,[string]$inData.ESXiConfiginfo.esxiAlerts,$inData.ESXiConfiginfo.multipathpolicyStatus,$inData.ESXiConfiginfo.recentPatches,$inData.ESXiConfiginfo.esxiServiceStatus, [string]$inData.ESXiConfiginfo.failedLogs,$inData.ESXiConfiginfo.BiosVersion,$warningLogs,'NA',$inData.ESXiConfiginfo.EVCMode,$inData.ESXiConfiginfo.MaxEVC,$inData.ESXiConfiginfo.isNTPRunning,$inData.ESXiConfiginfo.NTPServers,$inData.ESXiConfiginfo.UpTimeDays, $inData.ESXiConfiginfo.NumVMs,'NA','NA',$inData.ESXiConfiginfo.DNSServers,$inData.ESXiConfiginfo.OriginalURi,$inData.ESXiConfiginfo.CertIssuer,$inData.ESXiConfiginfo.CertIsValid,$inData.ESXiConfiginfo.CertExpires,$inData.ESXiConfiginfo.CertDaysToExpire,$comments,$insMethod,$inData.ESXiConfiginfo.vCenter

	write-host $insertSQLCMD

	$resultsql = Invoke-Sqlcmd -Query $insertSQLCMD -ServerInstance $DB_HOST -Username $DB_USERNAME -Password $DB_USER_PASSWORD -ErrorAction Stop | Select-Object * -ExcludeProperty ItemArray, Table, RowError, RowState, HasErrors | ConvertTo-Json	
	$resultsql
	if ($resultsql) {
		write-host "Successfully Inserted Esxi Data for $($inData.Name)"
	}
	else {
	write-host "failed to insert ESXi Data for $($inData.Name)"
	}
}

function VM_Insert ($inData) {

$vmquery = @"
EXEC [Automation].[dbo].[sp_ghc_Hc_Insert]
	@uid = N'{0}',
	@currentdate = N'{1}',
	@insmethod = N'{2}',
	@servername = N'{3}',
	@VMName = N'{4}',
	@vmHostname = N'{5}',
	@vmCluster = N'{6}',
	@vmpowerState = N'{7}',
	@vmIPAddress = N'{8}',
	@vmOS = N'{9}',
	@vmBoottime = N'{10}',
	@vmTotalCPU = N'{11}',
	@vmCPUAffinity = N'{12}',
	@vmCPUHotAdd = N'{13}',
	@vmCPUShare = N'{14}',
	@vmTotalMemory = N'{15}',
	@vmMemoryHotAdd = N'{16}',
	@vmMemoryShare = N'{17}',
	@vmTotalNics = N'{18}',
	@vmOverallCpuUsage = N'{19}',
	@vmMemoryUsage = N'{20}',
	@vmToolsStatus = N'{21}',
	@vmToolsVersion = N'{22}',
	@vmTimeSync = N'{23}',
	@vmHardwareVersion = N'{24}',
	@vmMemoryLimit = N'{25}',
	@vmMemoryReservation = N'{26}',
	@vmCPUreservation = N'{27}',
	@vmCPUlimit = N'{28}',
	@vmCBT = N'{29}',
	@vmSwapped = N'{30}',
	@vmBallooned = N'{31}',
	@vmCompressed = N'{32}',
	@VMSockets = N'{33}',
	@VMCoresPerSocket = N'{34}',
	@VMOptimized = N'{35}',
	@vmOptimalSockets = N'{36}',
	@vmOptimalCoresPerSockets = N'{37}',
	@vmPriority = N'{38}',
	@vNumaRecommendation = N'{39}',
	@comments = N'{40}'
"@
	$insMethod = 'VMS'
	$comments = "Data fetched successfully for $($inData.Name)"


$insertSQLCMD = $vmquery -f $ukey, $udate,$insMethod, $inData.Name,$inData.VMConfiginfo.VMName,$inData.VMConfiginfo.Hostname,$inData.VMConfiginfo.Cluster,$inData.VMConfiginfo.powerState,$inData.VMConfiginfo.IPAddress,$inData.VMConfiginfo.OS,$inData.VMConfiginfo.Boottime,$inData.VMConfiginfo.TotalCPU,$inData.VMConfiginfo.CPUAffinity,$inData.VMConfiginfo.CPUHotAdd,$inData.VMConfiginfo.CPUShare,$inData.VMConfiginfo.TotalMemory,$inData.VMConfiginfo.MemoryHotAdd,$inData.VMConfiginfo.MemoryShare,$inData.VMConfiginfo.TotalNics,$inData.VMConfiginfo.OverallCpuUsage,$inData.VMConfiginfo.MemoryUsage,$inData.VMConfiginfo.ToolsStatus,$inData.VMConfiginfo.ToolsVersion,$inData.VMConfiginfo.TimeSync,$inData.VMConfiginfo.HardwareVersion,$inData.VMConfiginfo.MemoryLimit,$inData.VMConfiginfo.MemoryReservation,$inData.VMConfiginfo.CPUreservation,$inData.VMConfiginfo.CPUlimit,$inData.VMConfiginfo.CBT,$inData.VMConfiginfo.Swapped,$inData.VMConfiginfo.Ballooned,$inData.VMConfiginfo.Compressed,$inData.VMConfiginfo.VMSockets,$inData.VMConfiginfo.VMCoresPerSocket,$inData.VMConfiginfo.VMOptimized,$inData.VMConfiginfo.OptimalSockets,$inData.VMConfiginfo.OptimalCoresPerSockets,$inData.VMConfiginfo.Priority,$inData.VMConfiginfo.Details,$comments

	#write-host $insertSQLCMD

	$resultsql = Invoke-Sqlcmd -Query $insertSQLCMD -ServerInstance $DB_HOST -Username $DB_USERNAME -Password $DB_USER_PASSWORD -ErrorAction Stop | Select-Object * -ExcludeProperty ItemArray, Table, RowError, RowState, HasErrors | ConvertTo-Json	
	$resultsql
	if ($resultsql) {
		write-host "Successfully Inserted VM Data for $($inData.Name)"
	}
	else {
	write-host "failed to insert VM Data for $($inData.Name)"
	}
}

function Build-hostReport($vmHost,$ukey,$udate,$vcenter){
$inData=@()
  #  try{
    	
	    $conn = Test-NetConnection $DB_HOST -Port 1433
	   	if ($conn.TcpTestSucceeded -eq 'True'){
	        #Interate through each host 
	    	$vmDetails = CollectHostDetails -vmHost $vmHost -vcenter $vcenter
	    	$finalOutput = New-Object -TypeName psobject -Property $objectesxiProperty
			#$vmDetails
			$inData = $vmDetails | ConvertFrom-Json
            ESXI_Insert -inData $inData
          
	        
	    }  
		 else {    
            $vmDetails = CollectHostDetails -vmHost $vmHost -vcenter $vcenter
            $out = $vmDetails | ConvertTo-Json
            $out
		 } 
    #}
    #catch{
    #	Write-host "Check connectivity to the vcenter server"
    #	}
    
}

function Build-vmReport($vms,$ukey,$udate,$vcenter){
$inData=@()
  #  try{
    	
	    $conn = Test-NetConnection $DB_HOST -Port 1433
	   	if ($conn.TcpTestSucceeded -eq 'True'){
	        #Interate through each vm 
	    	$vmDetails = CollectVMDetails -vmMachine $vms
	    	#$vmDetails
			$inData = $vmDetails | ConvertFrom-Json
            VM_Insert -inData $inData
          
	        
	    }  
		 else {    
            $vmDetails = CollectVMDetails -vmMachine $vms
            $out = $vmDetails | ConvertTo-Json
            $out
		 } 
    #}
    #catch{
    #	Write-host "Check connectivity to the vcenter server"
    #	}
    
}


 
# Check to see if already connected and Disconnect any leftover connections before starting script.
If($null -eq $connectedServer){
    Try{
        DisConnect-VIServer -server * -Confirm:$false -Force
    }
    catch {
        #Write-Host "No Acive Session Found"
        #Write-host   "------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
    }
}


# Call connect vCenter function
if ($VarVcenter -eq 'vc1.com' -or $VarVcenter -eq 'vc1.com' -or $VarVcenter)
{
Set-PowerCLIConfiguration -ProxyPolicy NoProxy -Scope Session -Confirm:$false | Out-Null
}
$connected = ConnectVcenter -vCenter $VarVcenter
if($connected){
	#Call report for given vCenter function
    $seperatedvalues=$mulvalues.split(">")
    foreach($svalue in $seperatedvalues) {
    #write-host "SERVER in loop"
    #$svalue
    $vmHost = $svalue.split(',')[0]
	$GName = $vmHost.split('.')[0].Trim()
	$ESXICFG = $svalue.split(',')[-2]
	
    if ($global:objectesxiProperty.ContainsKey("Name")) {
        $global:objectesxiProperty["Name"] = $GName
    	}
    else {
        $global:objectesxiProperty.Add('Name',"$GName")
        }
    $vmDetails=@()
    If ($svalue -cmatch 'virtual') {
        Build-vmReport -vms $GName -ukey $ukey -udate $udate -vcenter $vcenter
        $getmehost = Get-VM -Name $GName
        #$getmehost.VMHost.Name
        Build-hostReport -vmHost $getmehost.VMHost.Name -ukey $ukey -udate $udate -vcenter $vcenter
        }
    else {
        Build-hostReport -vmHost $vmHost -ukey $ukey -udate $udate -vcenter $vcenter
        }
        
    }
    #call disconnect function to ensure only one connect to a vcenter
    DisconnectVcenter -vCenter  $VarVcenter
    }


####################################################################


#######DB WRITE HEALTHcheck############

#Resolve Credentails
[ValidateNotNullOrEmpty()]
$RES_USERNAME = '$INPUT{VALID_USER}'
$RES_PASSWORD = ConvertTo-SecureString '$INPUT{VALID_PASSWORD}' -AsPlainText -Force

$insMethod	= '$INPUT{INSMETHOD}'
$totalsrv 	= '$INPUT{TOTSERVERS}'
$ukey     	= '$INPUT{UNIQUEKEY}'
$udate     	= '$INPUT{REQDATE}'
$jsoninput 	= '$INPUT{JSONDATA}'


#Windows Output result
$HOSTNAME     = '$INPUT{VALID_SERVER_FQDN}'
$WSNumber     = '$INPUT{CURRENT_WORKSHEET_NUMBER}'
$OSType       = '$INPUT{OS}'


#DB Credentials
$DB_USERNAME      = '$INPUT{DB_USERNAME}'
$DB_USER_PASSWORD = '$INPUT{DB_PASSWORD}'
$DB_HOST          = '$INPUT{DB_HOSTNAME}'
	
#defines Current Date
$CurrentDate = '{0:yyyy-MM-dd hh:mm:ss}' -f (get-date)
$WSName = $WSNumber
$Scanneddate = $CurrentDate
$enum = 'Normal Health Check'

function MAIN ($totalsrv) {

$mainquery = @"
EXEC [Automation].[dbo].[sp_ghc_Hc_Insert]
		@servername = N'{0}',
		@currentdate = N'{1}',
		@insmethod = N'{2}'
"@

$insertSQLCMD = $mainquery -f $totalsrv, $Scanneddate, $insMethod

#write-host $insertSQLCMD

$resultsql = Invoke-Sqlcmd -Query $insertSQLCMD -ServerInstance $DB_HOST -Username $DB_USERNAME -Password $DB_USER_PASSWORD -ErrorAction Stop | Select-Object * -ExcludeProperty ItemArray, Table, RowError, RowState, HasErrors | ConvertTo-Json	
$resultsql
if ($resultsql)
{
write-host "Success"
}
else
{
write-host "failed"
}
}

function CLOSE ($ukey) {

$closequery = @"
EXEC [Automation].[dbo].[sp_ghc_Hc_Insert]
		@status = N'{0}',
		@currentdate = N'{1}',
		@insmethod = N'{2}',
		@uid = N'{3}'
"@

$status = "ProcessedSuccessfully"

$insertSQLCMD = $closequery -f $status, $Scanneddate, $insMethod, $ukey

#write-host $insertSQLCMD

$resultsql = Invoke-Sqlcmd -Query $insertSQLCMD -ServerInstance $DB_HOST -Username $DB_USERNAME -Password $DB_USER_PASSWORD -ErrorAction Stop | Select-Object * -ExcludeProperty ItemArray, Table, RowError, RowState, HasErrors | ConvertTo-Json	
$resultsql
if ($resultsql)
{
write-host "Success"
}
else
{
write-host "failed"
}
}

function ESXI ($inData) {

$mainquery = @"
EXEC [Automation].[dbo].[sp_ghc_Hc_Insert]
    @uid = N'{0}',
    @currentdate = N'{1}',
    @servername = N'{2}',
    @parentHost = N'{3}',
    @cluster = N'{4}',
    @PowerState = N'{5}',
    @esxiVersion = N'{6}',
    @build = N'{7}',
    @vendor = N'{8}',
    @model = N'{9}',
    @cpuModel = N'{10}',
    @ServiceTag = N'{11}',
    @MemorySizeGB = N'{12}',
    @MemoryUsageGB = N'{13}',
    @NumCpuCores = N'{14}',
    @CoresPerSocket = N'{15}',
    @vMotionEvents = N'{16}',
    @avgNetworkUsageKbps = N'{17}',
    @HAEnabled = N'{18}',
    @mgmtNetwork = N'{19}',
    @vMotionEnabled = N'{20}',
    @HAStatus = N'{21}',
    @avgCPU = N'{22}',
    @avgMemory = N'{23}',
    @drsEnabled = N'{24}',
    @datastoreHealth = N'{25}',
    @datastoreDead = N'{26}',
    @datastoreActive = N'{27}',
    @datastoreStandby = N'{28}',
    @esxiAlerts = N'{29}',
    @multipathpolicyStatus = N'{30}',
    @recentPatches = N'{31}',
    @esxiServiceStatus = N'{32}',
    @failedLogs = N'{33}',
    @BiosVersion = N'{34}',
    @warningLogs = N'{35}',
    @physicalHardware = N'{36}',
    @EVCMode = N'{37}',
    @MaxEVC = N'{38}',
    @isNTPRunning = N'{39}',
    @NTPServers = N'{40}',
    @UpTimeDays = N'{41}',
    @NumVMs = N'{42}',
    @PowerManagementPolicy = N'{43}',
    @AvailablePowerManagePolicy = N'{44}',
    @DNSServers = N'{45}',
    @OriginalURi = N'{46}',
    @CertIssuer = N'{47}',
    @CertIsValid = N'{48}',
    @CertExpires = N'{49}',
    @CertDaysToExpire = N'{50}',
    @comments = N'{51}',
    @insmethod = N'{52}',
    @vCenter = N'{53}'
"@

	$comments = "Data fetched successfully for $($inData.Name)"

	$insertSQLCMD = $mainquery -f $ukey, $udate,$inData.Name,$inData.ESXiConfiginfo.ParentHost,$inData.ESXiConfiginfo.Cluster,$inData.ESXiConfiginfo.Powerstate,$inData.ESXiConfiginfo.esxiVersion,$inData.ESXiConfiginfo.Build,$inData.ESXiConfiginfo.vendor, $inData.ESXiConfiginfo.model,$inData.ESXiConfiginfo.cpuModel,$inData.ESXiConfiginfo.ServiceTag,$inData.ESXiConfiginfo.MemorySizeGB,$inData.ESXiConfiginfo.MemoryUsageGB,$inData.ESXiConfiginfo.NumCpuCores,$inData.ESXiConfiginfo.CoresPerSocket,$inData.ESXiConfiginfo.vMotionEvents,'NA', $inData.ESXiConfiginfo.HAEnabled,$inData.ESXiConfiginfo.mgmtNetwork,$inData.ESXiConfiginfo.vMotionEnabled,$inData.ESXiConfiginfo.HAStatus,$inData.ESXiConfiginfo.avgCPU,$inData.ESXiConfiginfo.avgMemory,$inData.ESXiConfiginfo.drsEnabled,$inData.ESXiConfiginfo.datastoreHealth, $inData.ESXiConfiginfo.datastoreDead,$inData.ESXiConfiginfo.datastoreActive,$inData.ESXiConfiginfo.datastoreStandby,[string]$inData.ESXiConfiginfo.esxiAlerts,$inData.ESXiConfiginfo.multipathpolicyStatus,$inData.ESXiConfiginfo.recentPatches,$inData.ESXiConfiginfo.esxiServiceStatus, [string]$inData.ESXiConfiginfo.failedLogs,$inData.ESXiConfiginfo.BiosVersion,[string]$inData.ESXiConfiginfo.warningLogs,'NA',$inData.ESXiConfiginfo.EVCMode,$inData.ESXiConfiginfo.MaxEVC,$inData.ESXiConfiginfo.isNTPRunning,$inData.ESXiConfiginfo.NTPServers,$inData.ESXiConfiginfo.UpTimeDays, $inData.ESXiConfiginfo.NumVMs,'NA','NA',$inData.ESXiConfiginfo.DNSServers,$inData.ESXiConfiginfo.OriginalURi,$inData.ESXiConfiginfo.CertIssuer,$inData.ESXiConfiginfo.CertIsValid,$inData.ESXiConfiginfo.CertExpires,$inData.ESXiConfiginfo.CertDaysToExpire,$comments,$insMethod,$inData.ESXiConfiginfo.vCenter

	#write-host $insertSQLCMD

	$resultsql = Invoke-Sqlcmd -Query $insertSQLCMD -ServerInstance $DB_HOST -Username $DB_USERNAME -Password $DB_USER_PASSWORD -ErrorAction Stop | Select-Object * -ExcludeProperty ItemArray, Table, RowError, RowState, HasErrors | ConvertTo-Json	
	$resultsql
	if ($resultsql) {
		write-host "Success"
	}
	else {
	write-host "failed"
	}
}

function WIN ($inData) {

$winquery = @"
EXEC [Automation].[dbo].[sp_ghc_Hc_Insert]
    @uid = N'{0}',
    @currentdate = N'{1}',
    @servername = N'{2}',
	@os = N'{3}',
	@w_clusterNodes = N'{4}',
	@w_cpuUsage = N'{5}',
	@w_cpuTop = N'{6}',
	@w_diskUsage = N'{7}',
	@w_diskLowCount = N'{8}',
	@w_memoryUsage = N'{9}',
	@w_memTop = N'{10}',
	@w_iisService = N'{11}',
	@w_iisLogs = N'{12}',
	@w_sqlService = N'{13}',
	@w_stoppedAutoServices = N'{14}',
	@w_recentPatches = N'{15}',
	@w_activeScheduledTasks = N'{16}',
	@w_topSystemLogs = N'{17}',
	@w_topProcesses = N'{18}',
	@w_topHotfixes = N'{19}',
	@w_topAppLogs = N'{20}',
	@w_nicConfig = N'{21}',
	@comments = N'{22}',
    @insmethod = N'{23}'
"@

	$comments = "Data fetched successfully for $($inData.SERVERNAME)"
    $oslevel = 'Windows'
    
    
    $appLogs = [string]$inData.Top10AppEventlogs

    $appLogs = $appLogs.Replace("'","''")
    
    $sysLogs = [string]$inData.Top10SystemEventlogs

    $sysLogs = $sysLogs.Replace("'","''")

	$insertSQLCMD = $winquery -f $ukey, $udate,$inData.SERVERNAME,$oslevel,$inData.ClusterNodes,$inData.CPUInfo.CPUUsage,$inData.CPUInfo.CPUTop5,$inData.DiskInformation.DiskUsage,$inData.DiskInformation.DiskLowCount,$inData.Meminfo.MemUsage,$inData.Meminfo.MemTop5,$inData.IISService,$inData.IISLogs,$inData.SQLService,$inData.StoppedAutoservices,$inData.RecentPatches,$inData.ActiveScheduledTasks,$sysLogs,$inData.Top5Processes,$inData.Top5Hotfixes,$appLogs,$inData.NICConfiguration,$comments,$insMethod

	write-host $insertSQLCMD

	$resultsql = Invoke-Sqlcmd -Query $insertSQLCMD -ServerInstance $DB_HOST -Username $DB_USERNAME -Password $DB_USER_PASSWORD -ErrorAction Stop | Select-Object * -ExcludeProperty ItemArray, Table, RowError, RowState, HasErrors | ConvertTo-Json	
	$resultsql
	if ($resultsql) {
		write-host "Success"
	}
	else {
	write-host "failed"
	}
}

function UNIX ($inData) {

$unixquery = @"
EXEC [Automation].[dbo].[sp_ghc_Hc_Insert]
    @uid = N'{0}',
    @currentdate = N'{1}',
    @servername = N'{2}',
	@os = N'{3}',
	@u_cpuUsage = N'{4}',
	@u_cpuTop = N'{5}',
	@u_MemUsage = N'{6}',
	@u_MemTop = N'{7}',
	@u_swapUsage = N'{8}',
	@u_FilesystemUsage = N'{9}',
	@u_MountPoints = N'{10}',
	@u_Uptime = N'{11}',
	@u_Errors = N'{12}',
	@u_DefunctProcess = N'{13}',
	@u_DiskMultipath = N'{14}',
	@u_ClusterNodes = N'{15}',
	@u_KernelVersion = N'{16}',
	@comments = N'{17}',
    @insmethod = N'{18}'
"@

	$comments = "Data fetched successfully for $($inData.Server_Name)"
    $oslevel = 'UNIX'

	$insertSQLCMD = $unixquery -f $ukey, $udate,$inData.Server_Name,$oslevel,$inData.Health_Check_Attributes.CPU_Usage,$inData.Health_Check_Attributes.TOP5CPU,$inData.Health_Check_Attributes.Memory_Usage,$inData.Health_Check_Attributes.MEMTOPS,$inData.Health_Check_Attributes.Swap_Usage,$inData.Health_Check_Attributes.Filesystem_Usage,$inData.Health_Check_Attributes.MountPoints,$inData.Health_Check_Attributes.Server_Uptime,$inData.Health_Check_Attributes.Errors,$inData.Health_Check_Attributes.Defunct_Process,$inData.Health_Check_Attributes.Disk_Multipath,$inData.Health_Check_Attributes.ClusterNodes,$inData.KernelVersion,$comments,$insMethod

	#write-host $insertSQLCMD

	$resultsql = Invoke-Sqlcmd -Query $insertSQLCMD -ServerInstance $DB_HOST -Username $DB_USERNAME -Password $DB_USER_PASSWORD -ErrorAction Stop | Select-Object * -ExcludeProperty ItemArray, Table, RowError, RowState, HasErrors | ConvertTo-Json	
	$resultsql
	if ($resultsql) {
		write-host "Success"
	}
	else {
	write-host "failed"
	}
}

#Identify Insert Method

if($insMethod -like 'MAIN'){
	MAIN -totalsrv $totalsrv
    }
elseif($insMethod -like 'ESXI') {
	$inData = $jsoninput | ConvertFrom-Json
    ESXI -inData $inData
	}
elseif($insMethod -like 'WIN') {
	$inData = $jsoninput | ConvertFrom-Json
    WIN -inData $inData
	}
elseif($insMethod -like 'UNIX') {
	$inData = $jsoninput | ConvertFrom-Json
    UNIX -inData $inData
	}
elseif($insMethod -like 'CLOSE') {
	CLOSE -ukey $ukey
	}
else {
        Write-Host "Insert Method not Found!!!!"
    }



################################


#########unix hc###############

#/bin/bash
os=`uname`
suexec rm -rf /tmp/check_heath.json
json_output_file=/tmp/check_heath.json
case $os in
    AIX)
        echo_opts=""
        ;;
    HP-UX)
        echo_opts=""
        ;;
    Linux)
        echo_opts="-e"
        ;;
    SunOS)
        echo_opts=""
        ;;
esac

kern=`uname -r`

json_begin() {
        echo $echo_opts "{"
        echo $echo_opts "\"Template_Version\" : \"09-04-2019\"",
        echo $echo_opts "\"Server_Name\" : \"`hostname`\","
        echo $echo_opts "\"KernelVersion\" : \"$kern\","
        echo $echo_opts "\"Health_Check_Attributes\" : {"
}
json_output(){
        if [ `echo $2 | head -c 1` == "{" ] || [ `echo $2 | head -c 1` == "[" ]
                then
                        echo $echo_opts "\"$1\" : $2,"
                else
                        echo $echo_opts "\"$1\" : \"$2\","
                fi
}
json_lastout(){
        echo $echo_opts "\"Execution_Date\" : \"`date`\""
        echo $echo_opts "}"
}
json_end(){
        echo $echo_opts "}"
}



DIR="/etc/httpd/"
if [ -d "$DIR" ]; then
  # Take action if $DIR exists. #
  echo "Installing config files in ${DIR}..."
fi

check_cpu() {
    # Check the CPU Usage based on OS.
    case $os in
        AIX)
            threshold="Optimal"
            for i in 0 1 2 3 4
                        do
                                if [ `amepat -N | grep 'CPU Util (Phys. Processors)' | awk -F '[' '{gsub(" |%|]",""); print $2}'` -gt 98 ]
                                then
                                        threshold="CPU_USAGE > 98%"
                                fi
                                sleep 1
                        done
                        echo ${threshold}
                        ;;
        HP-UX)
            echo "CPU_Usage"
            ;;
        Linux)
            threshold="Optimal"
                        for cpu_stats in `vmstat 1 5 | egrep -v "procs|free" | awk '{printf $16"\n"}'`
                        do
                                if [ ${cpu_stats} -gt 15 ]
                                then
                                        threshold="CPU_WAIT > 15%"
                                fi
                        done
                        echo ${threshold}
            ;;
        SunOS)
            echo "CPU_Usage"
                         if [ "$[`top -d 2|grep "CPU states"|awk '{print $9}'|awk -F"." '{print $1}'`]" -gt 15 ]
                         then
                                threshold="CPU_WAIT > 15%"
                        fi
            ;;
    esac
}

check_cluster() {
    # Check the disk paths based on OS.
    case $os in
        AIX)
            echo "No Associated Cluster nodes Found"
            ;;
        HP-UX)
            echo "No Associated Cluster nodes Found"
            ;;
        Linux)
              if [ -f '/etc/cluster/cluster.conf' ]
			  then
              value=$(output="$(suexec cat /etc/cluster/cluster.conf)"
              	echo "$output" | while IFS= read -r line ;
	          do
		      	checked="$(echo $line | cut -d " " -f3)"
    			if [[ ! -z "$checked"  && "$checked" == *nodeid* ]]; then
        			newvar="$(echo $line | cut -d " " -f2 | cut -d "=" -f2 | tr -d "\"")"
        			echo "$newvar"
    			fi
			  done)
			  finvar="$(echo $value | tr -d '\n' | tr -d "\"" | tr ' ' ',')"
			  echo "$finvar"
			  elif [ -f '/var/log/cluster/corosync.log' ]
              then
              	value=$(output="$(suexec /sbin/pcs status nodes)"
			  	echo "$output" | while IFS= read -r line ;
			  	do
			  		checked="$(echo $line | cut -d ":" -f2)"
    				if [[ ! -z "$checked" ]]; then
        				newvar="$(echo $line | cut -d ":" -f2)"
        				echo "$newvar"
    				fi
			  	done)
			  	finvar="$(echo $value | tr -d '\n' | tr -d "\"" | tr ' ' ',')"
			  	echo "$finvar"
			  else
			  	echo "No Associated Cluster nodes Found"
			  fi
              ;;
        SunOS)
            echo "No Associated Cluster nodes Found"
            ;;
    esac
}

check_memory() {
    # Check the Memory Usage based on OS.
    case $os in
        AIX)
            if [ `amepat | grep 'Available Memory (MB)' | awk -F'[' '{gsub(" |]|%",""); print $2}'` -lt 5 ]
                        then
                                echo "Above 95%"
                        else
                                echo "Optimal"
                        fi
            ;;
        HP-UX)
            echo "Memory_Usage"
            ;;
        Linux)
            if [ `free -m | grep "Mem:" | awk '{printf "%d",($3-$6-$7)/$2*100}'` -gt 95 ]
                        then
                                echo "Above 95%"
                        else
                                echo "Optimal"
                        fi
                        ;;
        SunOS)
            echo "Memory_Usage"
                        if [ "$[`top -d 1|grep "Memory:"|sed 's/G//g'|awk '{ print ($2-$4)*100/$2}'|awk -F"." '{print $1}'`]" -gt 95 ]
                        then
                                echo "Above 95%"
                        else
                                echo "Optimal"
                        fi

            ;;
    esac
}
check_swap() {
    # Check the Swap Usage based on OS.
    case $os in
        AIX)
            if [ `lsps -s | grep -v Percent | awk '{gsub("%$",""); print $2}'` -gt 50 ]
                        then
                                echo "Above 50%"
                        else
                                echo "Optimal"
                        fi
            ;;
        HP-UX)
            echo "Swap_Usage"
            ;;
        Linux)
            if [ "$[`free -m | grep "Swap:" | awk '{printf "%d",100-($4)/$2*100}'`]" -gt 60 ]
                        then
                                echo "Above 60%"
                        else
                                echo "Optimal"
                        fi
            ;;
        SunOS)
            echo "Swap_Usage"
            ;;
    esac
}
check_filesystem() {
    # Check the Filesystem Usage based on OS.
    case $os in
        AIX)
            let count=0
                        for fsname in `mount | grep jfs | awk '{print $2}'`
                        do
                                if [ `df -gt $fsname | grep $fsname$ | awk '{print $5}' | awk '{gsub("%$",""); print}'` -gt 85 ]
                                then
                                        let count+=1
                                fi
                        done
            echo $count" filesystem(s) above 85%"
            ;;
        HP-UX)
            echo "Filesystem_Usage"
            ;;
        Linux)
                        let count=0
                        for fsname in `mount | grep -e xfs -e ext | awk '{print $3}'`
                        do
                                if [ `suexec df -Ph $fsname | grep $fsname$ | awk '{print $5}' | awk '{gsub("%$",""); print}'` -gt 85 ]
                                then
                                        let count+=1
                                fi
                        done
            echo $count" filesystem(s) above 85%"

            ;;
        SunOS)
            echo "Filesystem_Usage"
                        let count=0
                        for fsname in `mount|egrep -v "/.alt|swap|:/"|awk '{print $1}'`
                        do
                                if [ "$[`df -h $fsname | grep $fsname$ | awk '{print $5}' | sed 's/%//g'`]" -gt 85 ]
                                then
                                        let count+=1
                                fi
                        done
            echo $count" filesystem(s) above 85%"
            
            

			
            ;;
    esac
}
check_mountpoint() {
    # Check the Filesystem Usage based on OS.
    case $os in
        AIX)
           echo "Mountpoints"
            ;;
        HP-UX)
            echo "Mountpoints"
            ;;
        Linux)
            data="{"
			data+=`suexec df -Ph | grep -v tmpfs | awk '{print "\""$6"\"",":","\""$4"\","}' | awk 'NR>1'`
			OUT_DATA=${data::-1}
			OUT_DATA+="}"
			echo $OUT_DATA
            ;;
        SunOS)
            echo "Mountpoints"
            ;;
    esac
}
check_uptime() {
    # Check the Uptime on the server.
        echo `uptime | awk -F"," '{print $1}' | awk '{$1=$2="";print}' | awk '{gsub( "^  ","" ); print}' | awk '{if(match($2,"day|min")){print}else{print $0" hours"}}'`
}
check_errors() {
    # Check the Errors Reported based on OS.
    case $os in
        AIX)
            err24=`errpt -s \`perl -MPOSIX -we 'print POSIX::strftime "%m%d0000%y\n", localtime(time-87400)'\` -e \`perl -MPOSIX -we 'print POSIX::strftime "%m%d%H%M%y\n", localtime'\` | grep -v -e IDENTIFIER`
                        if [ -z "$err24" ]
                        then
                                echo "No Errors"
                        else
                                echo "Errors Reported"
                        fi
            ;;
        HP-UX)
            echo "No Errors"
            ;;
        Linux)
            if [ -z ` suexec head -20 /var/log/messages | grep -i err` ]
                        then
                                echo "No Errors"
                        else
                                echo "Errors Reported"
                        fi
            ;;
        SunOS)
            echo "last 20 messages"
                        tail -20 /var/adm/messages
            ;;
    esac
}
check_defunct() {
    # Check the defunct processes based on OS.
    case $os in
        AIX)
            if [ `ps -ef | grep -i defunct | wc -l` -lt 15 ]
                        then
                                echo "No Defunct Processes"
                        else
                                echo "`ps -ef | grep -i defunct | wc -l` Defunct Processes Reported"
                        fi
            ;;
        HP-UX)
            echo "No Defunct"
            ;;
        Linux)
            if [ `ps -ef | grep -i defunct | wc -l` -lt 15 ]
                        then
                                echo "No Defunct Processes"
                        else
                                echo "`ps -ef | grep -i defunct | wc -l` Defunct Processes Reported"
                        fi
            ;;
        SunOS)
            echo "No Defunct"
            ;;
    esac
}
check_diskpaths() {
    # Check the disk paths based on OS.
    case $os in
        AIX)
            if [ -z "`lspath | grep -v Enabled`" ]
                        then
                                echo "No Issues"
                        else
                                echo "Failures Reported"
                        fi
                        ;;
        HP-UX)
            echo "No Defunct"
            ;;
        Linux)
            echo "NA"
            ;;
        SunOS)
            echo "No Defunct"
            ;;
    esac
}

check_top5mem() {
    # Check the disk paths based on OS.
    case $os in
        AIX)
            if [ -z "`lspath | grep -v Enabled`" ]
                        then
                                echo "No Issues"
                        else
                                echo "Failures Reported"
                        fi
                        ;;
        HP-UX)
            echo "No Defunct"
            ;;
        Linux)
            datamem+=`ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head -6`
			OUT_DATAMEM=${datamem::-1}
			echo $OUT_DATAMEM
            ;;
        SunOS)
            echo "No Defunct"
            ;;
    esac
}
check_top5cpu() {
    # Check the disk paths based on OS.
    case $os in
        AIX)
            if [ -z "`lspath | grep -v Enabled`" ]
                        then
                                echo "No Issues"
                        else
                                echo "Failures Reported"
                        fi
                        ;;
        HP-UX)
            echo "No Defunct"
            ;;
        Linux)
            datacpu+=`ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%cpu | head -6`
			OUT_DATACPU=${datacpu::-1}
			echo $OUT_DATACPU
            ;;
        SunOS)
            echo "No Defunct"
            ;;
    esac
}
#echo "opsys=$os"
json_begin > $json_output_file
json_output 'OS_Type' "$os" >> $json_output_file

if [ $# -eq 0 ]
then
        json_output 'CPU_Usage' "`check_cpu`" >> $json_output_file
        json_output 'Memory_Usage' "`check_memory`" >> $json_output_file
        json_output 'Swap_Usage' "`check_swap`" >> $json_output_file
        json_output 'Filesystem_Usage' "`check_filesystem`" >> $json_output_file
        json_output 'Server_Uptime' "`check_uptime`" >> $json_output_file
        json_output 'Errors' "`check_errors`" >> $json_output_file
        json_output 'Defunct_Process' "`check_defunct`" >> $json_output_file
        json_output 'Disk_Multipath' "`check_diskpaths`" >> $json_output_file
else


        for args in `echo $@|sed 's/|/ /g'`
        do
                if [ ${args} == "CPU" ]
                then
                        json_output 'CPU_Usage' "`check_cpu`" >> $json_output_file
                fi
                if [ ${args} == "MEMORY" ]
                then
                        json_output 'Memory_Usage' "`check_memory`" >> $json_output_file
                fi
                if [ ${args} == "UNIX_SWAP" ]
                then
                        json_output 'Swap_Usage' "`check_swap`" >> $json_output_file
                fi
                if [ ${args} == "DISK" ]
                then
                        json_output 'Filesystem_Usage' "`check_filesystem`" >> $json_output_file
                        json_output 'MountPoints' "`check_mountpoint`" >> $json_output_file
                fi
                if [ ${args} == "UPTIME" ]
                then
                        json_output 'Server_Uptime' "`check_uptime`" >> $json_output_file
                fi
                if [ ${args} == "ERRORS" ]
                then
                        json_output 'Errors' "`check_errors`" >> $json_output_file
                fi
                if [ ${args} == "UNIX_DEFUNCT_PROCESS" ]
                then
                        json_output 'Defunct_Process' "`check_defunct`" >> $json_output_file
                fi
                if [ ${args} == "DISK_MULTIPATH" ]
                then
                        json_output 'Disk_Multipath' "`check_diskpaths`" >> $json_output_file
                fi
                if [ ${args} == "MEMTOPS" ]
				then
				json_output 'TOP5MEM' "`check_top5mem`" >> $json_output_file
				fi
                if [ ${args} == "CPUTOPS" ]
				then
				json_output 'TOP5CPU' "`check_top5cpu`" >> $json_output_file
				fi
				if [ ${args} == "CLUSTER" ]
				then
				json_output 'ClusterNodes' "`check_cluster`" >> $json_output_file
				fi
				if [ ${args} == "NA-Functions" ]
				then
				json_output 'CPU_Usage' "`check_cpu`" >> $json_output_file
				json_output 'Memory_Usage' "`check_memory`" >> $json_output_file
				json_output 'Swap_Usage' "`check_swap`" >> $json_output_file
				json_output 'Filesystem_Usage' "`check_filesystem`" >> $json_output_file
				json_output 'MountPoints' "`check_mountpoint`" >> $json_output_file
				json_output 'Server_Uptime' "`check_uptime`" >> $json_output_file
				json_output 'Errors' "`check_errors`" >> $json_output_file
				json_output 'Defunct_Process' "`check_defunct`" >> $json_output_file
				json_output 'Disk_Multipath' "`check_diskpaths`" >> $json_output_file
				json_output 'TOP5CPU' "`check_top5cpu`" >> $json_output_file
				json_output 'MEMTOPS' "`check_top5mem`" >> $json_output_file
				json_output 'ClusterNodes' "`check_cluster`" >> $json_output_file
				fi
				
        done
fi

json_lastout >> $json_output_file
json_end >> $json_output_file
cat $json_output_file


#############################

###################SEND EMAIL##############

#Declaration of the variables
	$dbserver         = '$INPUT{DBHOST}'
	$dbuser           = '$INPUT{DBUSER}'
	$dbpwd            = '$INPUT{DBPASSWORD}'
	$dbtable          = '[Automation].[dbo].[vNUMA_Config]'
	$ukey 			  = '$INPUT{UNIQUEKEY}'
# Setting Variables
	$date= get-date -format "yyyy_MM_dd_hh_mm_ss"
	$titledate=(Get-Date).ToUniversalTime()
	$attachmentpath1   = "c:\temp\Main_" + $date + ".csv"
    $attachmentpath2   = "c:\temp\VM_" + $date + ".csv"
    $attachmentpath3   = "c:\temp\ESXI_" + $date + ".csv"
    $attachmentpath4   = "c:\temp\win_" + $date + ".csv"
    $attachmentpath5   = "c:\temp\unix_" + $date + ".csv"
    $htmlpath = "C:\temp\GIOHC_results.html"
	$mainquery = "select * from automation.dbo.Gio_Main where id = '$($ukey)'"
    $vmquery = "select * from Automation.dbo.gio_vm_hc where id = '$($ukey)'"
    $esxquery = "select * from Automation.dbo.gio_esxi_hc where id = '$($ukey)'"
    $winquery = "select id,requestDate,serverName,type,os,w_clusterNodes,w_cpuUsage,w_cpuTop,w_diskUsage,w_diskLowCount,w_memoryUsage,w_memTop,w_iisService,w_iisLogs,w_sqlService,w_stoppedAutoServices,w_recentPatches,w_activeScheduledTasks,w_topSystemLogs,w_topProcesses,w_topHotfixes,w_topAppLogs,w_nicConfig,comments from automation.dbo.gio_GuestOS_hc where id = '$($ukey)' and type ='WIN'"
    $unixquery = "select id,requestDate,serverName,type,os,u_cpuUsage,u_cpuTop,u_MemUsage,u_MemTop,u_swapUsage,u_FilesystemUsage,u_MountPoints,u_Uptime,u_Errors,u_DefunctProcess,u_DiskMultipath,u_ClusterNodes,u_KernelVersion,comments from automation.dbo.gio_GuestOS_hc where id = '$($ukey)' and type ='UNIX'"

$mainresult = Invoke-Sqlcmd -ServerInstance $dbserver -Username $dbuser -Password $dbpwd -Query $mainquery
$vmresult = Invoke-Sqlcmd -ServerInstance $dbserver -Username $dbuser -Password $dbpwd -Query $vmquery
$esxresult = Invoke-Sqlcmd -ServerInstance $dbserver -Username $dbuser -Password $dbpwd -Query $esxquery
$winresult = Invoke-Sqlcmd -ServerInstance $dbserver -Username $dbuser -Password $dbpwd -Query $winquery
$unixresult = Invoke-Sqlcmd -ServerInstance $dbserver -Username $dbuser -Password $dbpwd -Query $unixquery

[string]$dshealth = $esxresult[0].datastoreHealth
[string]$esxpatchstatus = $esxresult[0].recentPatches
[string]$esxcertstatus = $esxresult[0].CertExpires
$mainresult | Export-CSV $attachmentpath1 -NoTypeInformation 
$vmresult | Export-CSV $attachmentpath2 -NoTypeInformation 
$esxresult | Export-CSV $attachmentpath3 -NoTypeInformation 
$winresult | Export-CSV $attachmentpath4 -NoTypeInformation 
$unixresult | Export-CSV $attachmentpath5 -NoTypeInformation 

$excelpath = "c:\temp\GIOReport_" + $date + ".xlsx"

Import-CSV $attachmentpath1 | Export-Excel $excelpath -WorksheetName HCStatus -AutoSize
Import-CSV $attachmentpath2 | Export-Excel $excelpath -WorksheetName VMInfo -AutoSize
Import-CSV $attachmentpath3 | Export-Excel $excelpath -WorksheetName ESXiInfo -AutoSize
Import-CSV $attachmentpath4 | Export-Excel $excelpath -WorksheetName GuestOS_Win -AutoSize
Import-CSV $attachmentpath5 | Export-Excel $excelpath -WorksheetName GuestOS_Unix -AutoSize


$newhtmlvar = @"
<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="ProgId" content="Excel.Sheet">
<meta name="Generator" content="Aspose.Cell 21.10.4">
<link rel="File-List" href="_files_files/filelist.xml">
<link rel="Edit-Time-Data" href="_files_files/editdata.mso">
<link rel="OLE-Object-Data" href="_files_files/oledata.mso">
<!--[if gte mso 9]><xml>>
</xml><![endif]-->
<style>
<!--table
 {mso-displayed-decimal-separator:"\.";
 mso-displayed-thousand-separator:"\,";}
@page
 {
 mso-header-data:"";
 mso-footer-data:"";
 margin:0.75in 0.7in 0.75in 0.7in;
 mso-header-margin:0.3in;
 mso-footer-margin:0.3in;
 mso-page-orientation:Portrait;
 }
tr
 {mso-height-source:auto;
 mso-ruby-visibility:none;}
col
 {mso-width-source:auto;
 mso-ruby-visibility:none;}
br
 {mso-data-placement:same-cell;}
ruby
 {ruby-align:left;}
.style0
 {
 mso-number-format:General;
 text-align:general;
 vertical-align:bottom;
 white-space:nowrap;
 background:auto;
 mso-pattern:auto;
 color:#000000;
 font-size:11pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri","sans-serif";
 mso-protection:locked visible;
 mso-style-name:Normal;
 mso-style-id:0;}
.font0
 {
 color:#000000;
 font-size:11pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri","sans-serif"; }
.font1
 {
 color:#000000;
 font-size:10pt;
 font-weight:400;
 font-style:normal;
 font-family:"Arial","sans-serif"; }
.font2
 {
 color:#000000;
 font-size:11pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri","sans-serif"; }
.font3
 {
 color:#000000;
 font-size:14pt;
 font-weight:700;
 font-style:normal;
 font-family:"Calibri Light","sans-serif"; }
.font4
 {
 color:#000000;
 font-size:14pt;
 font-weight:700;
 font-style:normal;
 font-family:"Calibri","sans-serif"; }
.font5
 {
 color:#92D050;
 font-size:12pt;
 font-weight:400;
 font-style:normal;
 font-family:"Wingdings","sans-serif"; }
.font6
 {
 color:#FFFF00;
 font-size:12pt;
 font-weight:400;
 font-style:normal;
 font-family:"Wingdings","sans-serif"; }
.font7
 {
 color:#FFFFFF;
 font-size:14pt;
 font-weight:700;
 font-style:normal;
 font-family:"Calibri Light","sans-serif"; }
.font8
 {
 color:#000000;
 font-size:11pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri Light","sans-serif"; }
.font9
 {
 color:#000000;
 font-size:11pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri Light","sans-serif"; }
.font10
 {
 color:#000000;
 font-size:11pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri Light","sans-serif"; }
.font11
 {
 color:#000000;
 font-size:12pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri","sans-serif"; }
.font12
 {
 color:#000000;
 font-size:12pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri Light","sans-serif"; }
.font13
 {
 color:#000000;
 font-size:14pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri","sans-serif"; }
.font14
 {
 color:#808080;
 font-size:12pt;
 font-weight:400;
 font-style:normal;
 font-family:"Wingdings","sans-serif"; }
.font15
 {
 color:#0070C0;
 font-size:11pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri Light","sans-serif"; }
td
 {mso-style-parent:style0;
 mso-number-format:General;
 text-align:general;
 vertical-align:bottom;
 white-space:nowrap;
 background:auto;
 mso-pattern:auto;
 color:#000000;
 font-size:11pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri","sans-serif";
 mso-protection:locked visible;
 mso-ignore:padding;}
.style0
 {
 text-align:general;
 vertical-align:bottom;
 white-space:nowrap;
 background:auto;
 mso-pattern:auto;
 color:#000000;
 font-size:11pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri","sans-serif";
 mso-protection:locked visible;
 mso-style-name:"Normal";
 }
.style1
 {
 text-align:general;
 vertical-align:middle;
 white-space:nowrap;
 background:auto;
 mso-pattern:auto;
 color:#000000;
 font-size:10pt;
 font-weight:400;
 font-style:normal;
 font-family:"Arial","sans-serif";
 mso-protection:locked visible;
 }
.style2
 {
 text-align:general;
 vertical-align:middle;
 white-space:nowrap;
 background:auto;
 mso-pattern:auto;
 color:#000000;
 font-size:10pt;
 font-weight:400;
 font-style:normal;
 font-family:"Arial","sans-serif";
 mso-protection:locked visible;
 }
.style3
 {
 text-align:general;
 vertical-align:middle;
 white-space:nowrap;
 background:auto;
 mso-pattern:auto;
 color:#000000;
 font-size:10pt;
 font-weight:400;
 font-style:normal;
 font-family:"Arial","sans-serif";
 mso-protection:locked visible;
 }
.style4
 {
 text-align:general;
 vertical-align:middle;
 white-space:nowrap;
 background:auto;
 mso-pattern:auto;
 color:#000000;
 font-size:10pt;
 font-weight:400;
 font-style:normal;
 font-family:"Arial","sans-serif";
 mso-protection:locked visible;
 }
.style5
 {
 text-align:general;
 vertical-align:middle;
 white-space:nowrap;
 background:auto;
 mso-pattern:auto;
 color:#000000;
 font-size:10pt;
 font-weight:400;
 font-style:normal;
 font-family:"Arial","sans-serif";
 mso-protection:locked visible;
 }
.style6
 {
 text-align:general;
 vertical-align:middle;
 white-space:nowrap;
 background:auto;
 mso-pattern:auto;
 color:#000000;
 font-size:10pt;
 font-weight:400;
 font-style:normal;
 font-family:"Arial","sans-serif";
 mso-protection:locked visible;
 }
.style7
 {
 text-align:general;
 vertical-align:middle;
 white-space:nowrap;
 background:auto;
 mso-pattern:auto;
 color:#000000;
 font-size:10pt;
 font-weight:400;
 font-style:normal;
 font-family:"Arial","sans-serif";
 mso-protection:locked visible;
 }
.style8
 {
 text-align:general;
 vertical-align:middle;
 white-space:nowrap;
 background:auto;
 mso-pattern:auto;
 color:#000000;
 font-size:10pt;
 font-weight:400;
 font-style:normal;
 font-family:"Arial","sans-serif";
 mso-protection:locked visible;
 }
.style9
 {
 text-align:general;
 vertical-align:middle;
 white-space:nowrap;
 background:auto;
 mso-pattern:auto;
 color:#000000;
 font-size:10pt;
 font-weight:400;
 font-style:normal;
 font-family:"Arial","sans-serif";
 mso-protection:locked visible;
 }
.style10
 {
 text-align:general;
 vertical-align:middle;
 white-space:nowrap;
 background:auto;
 mso-pattern:auto;
 color:#000000;
 font-size:10pt;
 font-weight:400;
 font-style:normal;
 font-family:"Arial","sans-serif";
 mso-protection:locked visible;
 }
.style11
 {
 text-align:general;
 vertical-align:middle;
 white-space:nowrap;
 background:auto;
 mso-pattern:auto;
 color:#000000;
 font-size:10pt;
 font-weight:400;
 font-style:normal;
 font-family:"Arial","sans-serif";
 mso-protection:locked visible;
 }
.style12
 {
 text-align:general;
 vertical-align:middle;
 white-space:nowrap;
 background:auto;
 mso-pattern:auto;
 color:#000000;
 font-size:10pt;
 font-weight:400;
 font-style:normal;
 font-family:"Arial","sans-serif";
 mso-protection:locked visible;
 }
.style13
 {
 text-align:general;
 vertical-align:middle;
 white-space:nowrap;
 background:auto;
 mso-pattern:auto;
 color:#000000;
 font-size:10pt;
 font-weight:400;
 font-style:normal;
 font-family:"Arial","sans-serif";
 mso-protection:locked visible;
 }
.style14
 {
 text-align:general;
 vertical-align:middle;
 white-space:nowrap;
 background:auto;
 mso-pattern:auto;
 color:#000000;
 font-size:10pt;
 font-weight:400;
 font-style:normal;
 font-family:"Arial","sans-serif";
 mso-protection:locked visible;
 }
.x15
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:general;
 vertical-align:bottom;
 white-space:nowrap;
 background:auto;
 mso-pattern:auto;
 color:#000000;
 font-size:11pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri","sans-serif";
 mso-protection:locked visible;
 }
.x16
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:center;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 background:#E0DBF3;
 mso-pattern:auto none;
 color:#92D050;
 font-size:12pt;
 font-weight:400;
 font-style:normal;
 font-family:"Wingdings","sans-serif";
 border-top:2px solid #FFFFFF;
 border-right:2px solid #FFFFFF;
 border-bottom:none;
 border-left:2px solid #FFFFFF;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x17
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:center;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 background:#EDEDED;
 mso-pattern:auto none;
 color:#92D050;
 font-size:12pt;
 font-weight:400;
 font-style:normal;
 font-family:"Wingdings","sans-serif";
 border-top:2px solid #FFFFFF;
 border-right:2px solid #FFFFFF;
 border-bottom:none;
 border-left:2px solid #FFFFFF;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x18
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:center;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 background:#E0DBF3;
 mso-pattern:auto none;
 color:#FFFF00;
 font-size:12pt;
 font-weight:400;
 font-style:normal;
 font-family:"Wingdings","sans-serif";
 border-top:2px solid #FFFFFF;
 border-right:2px solid #FFFFFF;
 border-bottom:none;
 border-left:2px solid #FFFFFF;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x19
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:left;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 background:#A18CDE;
 mso-pattern:auto none;
 color:#FFFFFF;
 font-size:14pt;
 font-weight:700;
 font-style:normal;
 font-family:"Calibri Light","sans-serif";
 mso-protection:locked visible;
 }
.x20
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:left;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 mso-char-indent-count:1;
 padding-left:12px;
 background:#A18CDE;
 mso-pattern:auto none;
 color:#FFFFFF;
 font-size:14pt;
 font-weight:700;
 font-style:normal;
 font-family:"Calibri Light","sans-serif";
 mso-protection:locked visible;
 }
.x21
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:left;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 mso-char-indent-count:1;
 padding-left:10px;
 background:#E0DBF3;
 mso-pattern:auto none;
 color:#000000;
 font-size:11pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri Light","sans-serif";
 border-top:2px solid #FFFFFF;
 border-right:2px solid #FFFFFF;
 border-bottom:none;
 border-left:2px solid #FFFFFF;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x22
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:left;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 background:#E0DBF3;
 mso-pattern:auto none;
 color:#000000;
 font-size:11pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri Light","sans-serif";
 border-top:2px solid #FFFFFF;
 border-right:2px solid #FFFFFF;
 border-bottom:none;
 border-left:2px solid #FFFFFF;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x23
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:left;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 mso-char-indent-count:1;
 padding-left:10px;
 background:#F0EEF9;
 mso-pattern:auto none;
 font-size:11pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri Light","sans-serif";
 border-top:none;
 border-right:2px solid #FFFFFF;
 border-bottom:2px solid #FFFFFF;
 border-left:2px solid #FFFFFF;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x24
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:general;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 background:#F0EEF9;
 mso-pattern:auto none;
 color:#000000;
 font-size:11pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri Light","sans-serif";
 border-top:none;
 border-right:2px solid #FFFFFF;
 border-bottom:2px solid #FFFFFF;
 border-left:2px solid #FFFFFF;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x25
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:center;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 background:#EDEDED;
 mso-pattern:auto none;
 color:#FFFF00;
 font-size:12pt;
 font-weight:400;
 font-style:normal;
 font-family:"Wingdings","sans-serif";
 border-top:2px solid #FFFFFF;
 border-right:2px solid #FFFFFF;
 border-bottom:none;
 border-left:2px solid #FFFFFF;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x26
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:left;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 mso-char-indent-count:4;
 padding-left:40px;
 background:#E0DBF3;
 mso-pattern:auto none;
 color:#000000;
 font-size:11pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri Light","sans-serif";
 border-top:2px solid #FFFFFF;
 border-right:2px solid #FFFFFF;
 border-bottom:none;
 border-left:2px solid #FFFFFF;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x27
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:left;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 mso-char-indent-count:4;
 padding-left:40px;
 background:#F0EEF9;
 mso-pattern:auto none;
 font-size:11pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri Light","sans-serif";
 border-top:none;
 border-right:2px solid #FFFFFF;
 border-bottom:2px solid #FFFFFF;
 border-left:2px solid #FFFFFF;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x28
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:general;
 vertical-align:bottom;
 white-space:nowrap;
 background:auto;
 mso-pattern:auto;
 color:#000000;
 font-size:11pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri Light","sans-serif";
 mso-protection:locked visible;
 }
.x29
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:general;
 vertical-align:bottom;
 white-space:normal;word-wrap:break-word;
 background:auto;
 mso-pattern:auto;
 color:#000000;
 font-size:11pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri Light","sans-serif";
 mso-protection:locked visible;
 }
.x30
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:center;
 vertical-align:bottom;
 white-space:nowrap;
 background:auto;
 mso-pattern:auto;
 color:#000000;
 font-size:12pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri","sans-serif";
 mso-protection:locked visible;
 }
.x31
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:left;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 mso-char-indent-count:1;
 padding-left:10px;
 background:#F0EEF9;
 mso-pattern:auto none;
 color:#000000;
 font-size:12pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri Light","sans-serif";
 border-top:2px solid #FFFFFF;
 border-right:2px solid #FFFFFF;
 border-bottom:2px solid #FFFFFF;
 border-left:2px solid #FFFFFF;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x32
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:left;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 background:#F0EEF9;
 mso-pattern:auto none;
 color:#000000;
 font-size:12pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri Light","sans-serif";
 border-top:2px solid #FFFFFF;
 border-right:2px solid #FFFFFF;
 border-bottom:2px solid #FFFFFF;
 border-left:2px solid #FFFFFF;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x33
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:left;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 mso-char-indent-count:1;
 padding-left:10px;
 background:#E0DBF3;
 mso-pattern:auto none;
 color:#000000;
 font-size:12pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri Light","sans-serif";
 border-top:2px solid #FFFFFF;
 border-right:2px solid #FFFFFF;
 border-bottom:2px solid #FFFFFF;
 border-left:2px solid #FFFFFF;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x34
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:left;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 background:#E0DBF3;
 mso-pattern:auto none;
 color:#000000;
 font-size:12pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri Light","sans-serif";
 border-top:2px solid #FFFFFF;
 border-right:2px solid #FFFFFF;
 border-bottom:2px solid #FFFFFF;
 border-left:2px solid #FFFFFF;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x35
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:left;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 mso-char-indent-count:1;
 padding-left:10px;
 background:#F0EEF9;
 mso-pattern:auto none;
 color:#000000;
 font-size:12pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri Light","sans-serif";
 border-top:2px solid #FFFFFF;
 border-right:2px solid #FFFFFF;
 border-bottom:2px solid #FFFFFF;
 border-left:none;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x36
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:left;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 mso-char-indent-count:1;
 padding-left:10px;
 background:#E0DBF3;
 mso-pattern:auto none;
 color:#000000;
 font-size:12pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri Light","sans-serif";
 border-top:2px solid #FFFFFF;
 border-right:2px solid #FFFFFF;
 border-bottom:2px solid #FFFFFF;
 border-left:none;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x37
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:left;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 mso-char-indent-count:1;
 padding-left:10px;
 background:#F0EEF9;
 mso-pattern:auto none;
 color:#000000;
 font-size:12pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri Light","sans-serif";
 border-top:2px solid #FFFFFF;
 border-right:2px solid #FFFFFF;
 border-bottom:none;
 border-left:2px solid #FFFFFF;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x38
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:general;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 background:#F0EEF9;
 mso-pattern:auto none;
 color:#000000;
 font-size:12pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri Light","sans-serif";
 border-top:2px solid #FFFFFF;
 border-right:2px solid #FFFFFF;
 border-bottom:none;
 border-left:2px solid #FFFFFF;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x39
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:center;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 background:#C7BAEB;
 mso-pattern:auto none;
 color:#000000;
 font-size:14pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri","sans-serif";
 border-top:3px solid #FFFFFF;
 border-right:none;
 border-bottom:2px solid #FFFFFF;
 border-left:2px solid #FFFFFF;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x40
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:general;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 background:#F0EEF9;
 mso-pattern:auto none;
 color:#0070C0;
 font-size:11pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri Light","sans-serif";
 border-top:none;
 border-right:2px solid #FFFFFF;
 border-bottom:2px solid #FFFFFF;
 border-left:2px solid #FFFFFF;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x41
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:center;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 background:#E0DBF3;
 mso-pattern:auto none;
 color:#808080;
 font-size:12pt;
 font-weight:400;
 font-style:normal;
 font-family:"Wingdings","sans-serif";
 border-top:2px solid #FFFFFF;
 border-right:2px solid #FFFFFF;
 border-bottom:none;
 border-left:2px solid #FFFFFF;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x42
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:center;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 mso-rotate:90;
 background:#C7BAEB;
 mso-pattern:auto none;
 color:#000000;
 font-size:14pt;
 font-weight:700;
 font-style:normal;
 font-family:"Calibri Light","sans-serif";
 mso-protection:locked visible;
 }
.x43
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:left;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 mso-char-indent-count:1;
 padding-left:13px;
 background:#C7BAEB;
 mso-pattern:auto none;
 color:#000000;
 font-size:14pt;
 font-weight:700;
 font-style:normal;
 font-family:"Calibri","sans-serif";
 border-top:2px solid #FFFFFF;
 border-right:none;
 border-bottom:2px solid #FFFFFF;
 border-left:none;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x44
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:left;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 mso-char-indent-count:1;
 padding-left:13px;
 background:#C7BAEB;
 mso-pattern:auto none;
 color:#000000;
 font-size:14pt;
 font-weight:700;
 font-style:normal;
 font-family:"Calibri","sans-serif";
 border-top:2px solid #FFFFFF;
 border-right:2px solid #FFFFFF;
 border-bottom:2px solid #FFFFFF;
 border-left:none;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x45
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:center;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 mso-rotate:90;
 background:#C7BAEB;
 mso-pattern:auto none;
 color:#000000;
 font-size:14pt;
 font-weight:700;
 font-style:normal;
 font-family:"Calibri Light","sans-serif";
 border-top:none;
 border-right:2px solid #FFFFFF;
 border-bottom:none;
 border-left:none;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x46
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:left;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 mso-char-indent-count:1;
 padding-left:13px;
 background:#C7BAEB;
 mso-pattern:auto none;
 color:#000000;
 font-size:14pt;
 font-weight:700;
 font-style:normal;
 font-family:"Calibri","sans-serif";
 border-top:3px solid #FFFFFF;
 border-right:none;
 border-bottom:2px solid #FFFFFF;
 border-left:2px solid #FFFFFF;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x47
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:left;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 mso-char-indent-count:1;
 padding-left:13px;
 background:#C7BAEB;
 mso-pattern:auto none;
 color:#000000;
 font-size:14pt;
 font-weight:700;
 font-style:normal;
 font-family:"Calibri","sans-serif";
 border-top:3px solid #FFFFFF;
 border-right:none;
 border-bottom:2px solid #FFFFFF;
 border-left:none;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x48
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:left;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 mso-char-indent-count:1;
 padding-left:13px;
 background:#C7BAEB;
 mso-pattern:auto none;
 color:#000000;
 font-size:14pt;
 font-weight:700;
 font-style:normal;
 font-family:"Calibri","sans-serif";
 border-top:3px solid #FFFFFF;
 border-right:2px solid #FFFFFF;
 border-bottom:2px solid #FFFFFF;
 border-left:none;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x49
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:center;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 mso-rotate:90;
 background:#C7BAEB;
 mso-pattern:auto none;
 color:#000000;
 font-size:14pt;
 font-weight:700;
 font-style:normal;
 font-family:"Calibri Light","sans-serif";
 border-top:3px solid #FFFFFF;
 border-right:2px solid #FFFFFF;
 border-bottom:none;
 border-left:none;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x50
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:left;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 background:#F0EEF9;
 mso-pattern:auto none;
 font-size:11pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri","sans-serif";
 border-top:2px solid #FFFFFF;
 border-right:none;
 border-bottom:2px solid #FFFFFF;
 border-left:2px solid #FFFFFF;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x51
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:left;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 background:#F0EEF9;
 mso-pattern:auto none;
 font-size:11pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri","sans-serif";
 border-top:2px solid #FFFFFF;
 border-right:none;
 border-bottom:2px solid #FFFFFF;
 border-left:none;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x52
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:left;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 background:#F0EEF9;
 mso-pattern:auto none;
 font-size:11pt;
 font-weight:400;
 font-style:normal;
 font-family:"Calibri","sans-serif";
 border-top:2px solid #FFFFFF;
 border-right:2px solid #FFFFFF;
 border-bottom:2px solid #FFFFFF;
 border-left:none;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x53
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:left;
 vertical-align:middle;
 white-space:normal;word-wrap:break-word;
 mso-char-indent-count:1;
 padding-left:13px;
 background:#C7BAEB;
 mso-pattern:auto none;
 color:#000000;
 font-size:14pt;
 font-weight:700;
 font-style:normal;
 font-family:"Calibri","sans-serif";
 border-top:2px solid #FFFFFF;
 border-right:none;
 border-bottom:2px solid #FFFFFF;
 border-left:2px solid #FFFFFF;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
-->
</style>
<!--[if gte mso 9]><xml>
 <x:ExcelWorkbook>
  <x:ExcelWorksheets>
   <x:ExcelWorksheet>
    <x:Name>Final Report</x:Name>
<x:WorksheetOptions>
 <x:StandardWidth>2048</x:StandardWidth>
 <x:Print>
  <x:ValidPrinterInfo/>
  <x:PaperSizeIndex>1</x:PaperSizeIndex>
  <x:HorizontalResolution>600</x:HorizontalResolution>
  <x:VerticalResolution>600</x:VerticalResolution>
 </x:Print>
 <x:Zoom>95</x:Zoom>
 <x:Selected/>
</x:WorksheetOptions>
   </x:ExcelWorksheet>
  </x:ExcelWorksheets>
  <x:WindowHeight>11160</x:WindowHeight>
  <x:WindowWidth>20730</x:WindowWidth>
  <x:WindowTopX>-120</x:WindowTopX>
  <x:WindowTopY>-120</x:WindowTopY>
  <x:RefModeR1C1/>
  <x:TabRatio>600</x:TabRatio>
  <x:ActiveSheet>0</x:ActiveSheet>
 </x:ExcelWorkbook>
</xml><![endif]-->
</head>
<body link='blue' vlink='purple' >

<table border='0' cellpadding='0' cellspacing='0' width='746' style='border-collapse: 
 collapse;table-layout:fixed;width:559pt'>
 <col class='x28' width='103' style='mso-width-source:userset;background:none;width:77.25pt'>
 <col class='x28' width='197' style='mso-width-source:userset;background:none;width:147.75pt'>
 <col class='x29' width='389' style='mso-width-source:userset;background:none;width:291.75pt'>
 <col class='x30' width='57' style='mso-width-source:userset;background:none;width:42.75pt'>
 <tr height='26' style='mso-height-source:userset;height:19.5pt'>
<td height='23' class='x19' width='103' style='height:17.25pt;width:77.25pt;'>Dimension</td>
<td class='x20' width='197' style='width:147.75pt;'>Criteria</td>
<td class='x19' width='389' style='width:291.75pt;'>Results</td>
<td class='x19' width='57' style='width:42.75pt;'>Score</td>
 </tr>
 <tr height='26' style='mso-height-source:userset;height:19.5pt'>
<td rowspan='22' height='699' class='x54' style='height:524.45pt;'><div style='width:702px;margin-top:-363px;margin-left:-299px;transform: rotate(-90deg);-o-transform: rotate(-90deg);-webkit-transform: rotate(-90deg);-moz-transform: rotate(-90deg);-ms-transform: rotate(-90deg);'>Configuration Assurance</div></td>
<td colspan='3' class='x46'>Hardware Matching to Defined company Standards</td>
 </tr>
 <tr height='21' style='mso-height-source:userset;height:15.75pt'>
<td class='x21'>Frame Health ( DELL, HP, etc)</td>
<td class='x22'>Some of the servers are reported with Hardware errors.</td>
<td class='x25'>l</td>
 </tr>
 <tr height='21' style='mso-height-source:userset;height:15.75pt'>
<td class='x23'>Firmware Version</td>
<td class='x24'>Dell Poweredge servers FW version is fully compliant.</td>
<td class='x16'>l</td>
 </tr>
 <tr height='81' style='mso-height-source:userset;height:60.75pt'>
<td class='x21'>Interconnect<br><span style='mso-spacerun:yes;'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Port &amp; Link Status<br><span style='mso-spacerun:yes;'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>FAN Status<br><span style='mso-spacerun:yes;'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>PSU Status</td>
<td class='x22'>3 servers reported with Memory DIMM Failure.<br>1 server reported witj FAN<span style='mso-spacerun:yes;'>&nbsp; </span>errors<br>1 Server reported with LED Panel issue</td>
<td class='x25'>l</td>
 </tr>
 <tr height='27' style='mso-height-source:userset;height:20.25pt'>
<td colspan='3' class='x46'>ESX Versions and Config Matching to Defined FIS Standards&nbsp;</td>
 </tr>
 <tr height='21' style='mso-height-source:userset;height:15.75pt'>
<td class='x21'>ESX Compliance&nbsp;</td>
<td class='x22'>$esxpatchstatus <br> Certificate Expires on $esxcertstatus</td>
<td class='x16'>l</td>
 </tr>
 <tr height='21' style='mso-height-source:userset;height:15.75pt'>
<td class='x23'>ILO / Console Connectivity&nbsp;</td>
<td class='x24'></td>
<td class='x25'>l</td>
 </tr>
 <tr height='25' style='mso-height-source:userset;height:18.95pt'>
<td class='x21'>Vmotion Configuration</td>
<td class='x22'></td>
<td class='x16'>l</td>
 </tr>
 <tr height='21' style='mso-height-source:userset;height:15.75pt'>
<td class='x23'>Datastore Space&nbsp;</td>
<td class='x22'>$dshealth</td>
<td class='x16'>l</td>
 </tr>
 <tr height='21' style='mso-height-source:userset;height:15.75pt'>
<td class='x21'>SRM review </td>
<td class='x22'></td>
<td class='x16'>l</td>
 </tr>
 <tr height='21' style='mso-height-source:userset;height:15.75pt'>
<td class='x23'>Q-Depth settings</td>
<td class='x24'></td>
<td class='x17'>l</td>
 </tr>
 <tr height='40' style='mso-height-source:userset;height:30pt'>
<td class='x21'>NIC MTU settings</td>
<td class='x22'>MTU needs to be corrected for 5 Production servers. It was configured as 1400 and to be set as 1500</td>
<td class='x18'>l</td>
 </tr>
 <tr height='27' style='mso-height-source:userset;height:20.25pt'>
<td colspan='3' class='x46'>VM Guest Config &amp; Performance Matching to Defined FIS Standards</td>
 </tr>
 <tr height='21' style='mso-height-source:userset;height:15.75pt'>
<td colspan='3' class='x50'>Performance <br></td>
 </tr>
 <tr height='21' style='mso-height-source:userset;height:15.75pt'>
<td class='x26'>CPU</td>
<td class='x22'>1 server reported with multiple CPU alerts.</td>
<td class='x18'>l</td>
 </tr>
 <tr height='41' style='mso-height-source:userset;height:30.75pt'>
<td class='x27'>Memory</td>
<td class='x24'>Memory Performance looks healthy, Except for One VM where Swap usage is slight on the higher side.&nbsp;</td>
<td class='x17'>l</td>
 </tr>
 <tr height='41' style='mso-height-source:userset;height:30.75pt'>
<td class='x26'>Filesystem</td>
<td class='x22'>Observed few OS Filesystem are above the Threshold, needs remediation</td>
<td class='x18'>l</td>
 </tr>
 <tr height='21' style='mso-height-source:userset;height:15.75pt'>
<td class='x27'>Network</td>
<td class='x24'>No Issues Observed</td>
<td class='x17'>l</td>
 </tr>
 <tr height='21' style='mso-height-source:userset;height:15.75pt'>
<td class='x26'>DISK</td>
<td class='x22'>No Issues Observed</td>
<td class='x16'>l</td>
 </tr>
 <tr height='41' style='mso-height-source:userset;height:30.75pt'>
<td class='x23'>Availability</td>
<td class='x40'>All VM are configured under ESX Cluster for High Availability<br>DR setup is configured between vorhees &amp; Phoenix</td>
<td class='x17'>l</td>
 </tr>
 <tr height='21' style='mso-height-source:userset;height:15.75pt'>
<td class='x21'>VM Tools Compliance</td>
<td class='x22'></td>
<td class='x18'></td>
 </tr>
 <tr height='101' style='mso-height-source:userset;height:75.75pt'>
<td class='x23'>Hostbase Control Standards</td>
<td class='x24'>Some of the Controls running are unsupport like<span style='mso-spacerun:yes;'>&nbsp; </span>EPO &amp; Solidcore. Need to uninstall SolidCore. <br>SIEM on 2 server's are to be installed. <br>SCAPM on 2 server's are to be installed.<br>Other controls like BigFIX, BOKS are healthy&nbsp;</td>
<td class='x25'>l</td>
 </tr>
 <tr height='21' style='mso-height-source:userset;height:15.75pt'>
<td colspan='4' height='21' class='x28' style='mso-ignore:colspan;height:15.75pt;'></td>
 </tr>
 <tr height='26' style='mso-height-source:userset;height:19.5pt'>
<td height='50' class='x19' style='height:17.25pt;'>Dimension</td>
<td class='x20'>Criteria</td>
<td class='x19'>Results</td>
<td class='x19'>Score</td>
 </tr>
 <tr height='27' style='mso-height-source:userset;height:20.25pt'>
<td rowspan='7' height='219' class='x54' style='height:164.25pt;'><div style='width:222px;margin-top:-123px;margin-left:-59px;transform: rotate(-90deg);-o-transform: rotate(-90deg);-webkit-transform: rotate(-90deg);-moz-transform: rotate(-90deg);-ms-transform: rotate(-90deg);'>HIGH Availability</div></td>
<td colspan='3' class='x53'>High Availability Redundancy Checks</td>
 </tr>
 <tr height='43' style='mso-height-source:userset;height:32.25pt'>
<td class='x31'>Redundant Paths to Storage and Network</td>
<td class='x32'></td>
<td class='x17'></td>
 </tr>
 <tr height='43' style='mso-height-source:userset;height:32.25pt'>
<td class='x33'>Validation of VLANs &amp; NICs for resiliency  </td>
<td class='x34'></td>
<td class='x16'></td>
 </tr>
 <tr height='22' style='mso-height-source:userset;height:16.5pt'>
<td class='x31'>HA &amp; DRS on ESX</td>
<td class='x32'></td>
<td class='x17'></td>
 </tr>
 <tr height='43' style='mso-height-source:userset;height:32.25pt'>
<td class='x33'>Cluster Resource Usage on ESX</td>
<td class='x34'></td>
<td class='x16'></td>
 </tr>
 <tr height='22' style='mso-height-source:userset;height:16.5pt'>
<td class='x31'>HA Isolation Policy</td>
<td class='x32'></td>
<td class='x17'></td>
 </tr>
 <tr height='22' style='mso-height-source:userset;height:16.5pt'>
<td class='x33'>PCS Cluster Status</td>
<td class='x33'>NA</td>
<td class='x41'>l</td>
 </tr>
 <tr height='26' style='mso-height-source:userset;height:19.5pt'>
<td rowspan='4' height='281' class='x55' style='height:210.75pt;'><div style='width:281px;margin-top:-153px;margin-left:-89px;transform: rotate(-90deg);-o-transform: rotate(-90deg);-webkit-transform: rotate(-90deg);-moz-transform: rotate(-90deg);-ms-transform: rotate(-90deg);'>MONITORING</div></td>
<td colspan='3' class='x43'>Monitoring levels meet defined standards.  Tickets are sent to appropriate queue proper priority</td>
 </tr>
 <tr height='64' style='mso-height-source:userset;height:48pt'>
<td class='x35'>Standard<span style='mso-spacerun:yes;'>&nbsp; </span>VMWARE alerts are configured with appropriate thresholds</td>
<td class='x31'></td>
<td class='x17'></td>
 </tr>
 <tr height='85' style='mso-height-source:userset;height:63.75pt'>
<td class='x36'>Standard ESX &amp; "ESX Cluster" monitoring is configured w/ appropriate thresholds</td>
<td class='x33'></td>
<td class='x16'></td>
 </tr>
 <tr height='106' style='mso-height-source:userset;height:79.5pt'>
<td class='x35'>Standard UNIX guest OS monitoring and "Hardware Monitoring"<span style='mso-spacerun:yes;'>&nbsp; </span>is configured with appropriate thresholds</td>
<td class='x31'>Yes, Monitoring is in place. Standardized KPI has been configured<span style='mso-spacerun:yes;'>&nbsp; </span>for all UNIX CI <br>Yes, Hardware Monitoring for Critical Events are in place.</td>
<td class='x17'>l</td>
 </tr>
 <tr height='27' style='mso-height-source:userset;height:20.25pt'>
<td rowspan='5' height='220' class='x56' style='height:165pt;'><div style='width:220px;margin-top:-122px;margin-left:-59px;transform: rotate(-90deg);-o-transform: rotate(-90deg);-webkit-transform: rotate(-90deg);-moz-transform: rotate(-90deg);-ms-transform: rotate(-90deg);'>SUPPORT</div></td>
<td colspan='3' class='x46'>VENDOR SUPPORT AND INTERNAL COVERAGE DETAILS</td>
 </tr>
 <tr height='64' style='mso-height-source:userset;height:48pt'>
<td class='x37'>Confirmation of support agreements in place with hardware vendors</td>
<td class='x37'>Physical Servers are supported by Dell.</td>
<td class='x17'>l</td>
 </tr>
 <tr height='64' style='mso-height-source:userset;height:48pt'>
<td class='x33'>Confirmation of support agreements in place with software vendors</td>
<td class='x33'>OS is supported by RedHat&nbsp;</td>
<td class='x16'>l</td>
 </tr>
 <tr height='43' style='mso-height-source:userset;height:32.25pt'>
<td class='x38'>EOL OS Compliance </td>
<td class='x37'>Currently All ESXi &amp; UNIX VM are running with Supported OS Version</td>
<td class='x17'>l</td>
 </tr>
 <tr height='22' style='mso-height-source:userset;height:16.5pt'>
<td class='x33'>BAU Support</td>
<td class='x33'>24*7 BAU Support is available</td>
<td class='x16'>l</td>
 </tr>
 <tr height='44' style='mso-height-source:userset;height:33pt'>
<td height='39' class='x39' style='height:29.25pt;'>DR</td>
<td class='x38'>Disaster Recovery Strategy</td>
<td class='x37'>For the servers which are running on<span style='mso-spacerun:yes;'>&nbsp; </span>physical Dell servers are have similar DR setup</td>
<td class='x16'>l</td>
 </tr>
<![if supportMisalignedColumns]>
 <tr height='0' style='display:none'>
  <td width='103' style='width:77.25pt'; ></td>
  <td width='197' style='width:147.75pt'; ></td>
  <td width='389' style='width:291.75pt'; ></td>
  <td width='57' style='width:42.75pt'; ></td>
 </tr>
 <![endif]>
</table>

</body>

<style>
<!--
.x54
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:center;
 vertical-align:bottom;
 white-space:normal;word-wrap:break-word;
 mso-rotate:90;
 background:#C7BAEB;
 mso-pattern:auto none;
 color:#000000;
 font-size:14pt;
 font-weight:700;
 font-style:normal;
 font-family:"Calibri Light","sans-serif";
 border-top:3px solid #FFFFFF;
 border-right:2px solid #FFFFFF;
 border-bottom:none;
 border-left:none;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
.x55
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:center;
 vertical-align:bottom;
 white-space:normal;word-wrap:break-word;
 mso-rotate:90;
 background:#C7BAEB;
 mso-pattern:auto none;
 color:#000000;
 font-size:14pt;
 font-weight:700;
 font-style:normal;
 font-family:"Calibri Light","sans-serif";
 mso-protection:locked visible;
 }
.x56
 {
 mso-style-parent:style0;
 mso-number-format:General;
 text-align:center;
 vertical-align:bottom;
 white-space:normal;word-wrap:break-word;
 mso-rotate:90;
 background:#C7BAEB;
 mso-pattern:auto none;
 color:#000000;
 font-size:14pt;
 font-weight:700;
 font-style:normal;
 font-family:"Calibri Light","sans-serif";
 border-top:none;
 border-right:2px solid #FFFFFF;
 border-bottom:none;
 border-left:none;
 mso-diagonal-down:none;
 mso-diagonal-up:none;
 mso-protection:locked visible;
 }
-->
</style>
</html>
"@


$newhtmlvar | out-file C:\temp\GIOHC_results.html




if(test-path $htmlpath)
{
$results = Get-Content $htmlpath
}
else
{
Writs-host "File not found"	
}


if ($results)
{
Send-MailMessage -from "example.com" `
				 -to "user1@usercompany.com" `
				 -Subject "HealthCheck Report-$titledate (UTC)" `
                 -BodyAsHtml -Body "$results" `
                 -Attachments $excelpath, $htmlpath `
                 -SmtpServer "smtp.usercompany.com"
write-host "EMAIL SEND"
}
else
    {
    write-host "FAILED to generate Report"
    }

Remove-Item -Path $excelpath -recurse -Force -ea SilentlyContinue
Remove-Item -Path $attachmentpath1 -recurse -Force -ea SilentlyContinue
Remove-Item -Path $attachmentpath2 -recurse -Force -ea SilentlyContinue
Remove-Item -Path $attachmentpath3 -recurse -Force -ea SilentlyContinue
Remove-Item -Path $attachmentpath4 -recurse -Force -ea SilentlyContinue
Remove-Item -Path $attachmentpath5 -recurse -Force -ea SilentlyContinue
Remove-Item -Path $htmlpath -recurse -Force -ea SilentlyContinue



